{"version":3,"sources":["common/FormsControls/FormsControls.module.css","utils/validators/validators.ts","common/FormsControls/FormsControls.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogsItem.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","required","value","undefined","maxLengthCreator","maxLength","length","FormControl","meta","error","touched","children","hasError","className","s","formControl","Textarea","props","input","restProps","Input","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","to","React","connect","DialogsItem","dialog","active","src","alt","id","name","Message","message","maxLength50","AddDialogsMessageReduxForm","reduxForm","form","onSubmitSuccess","result","dispatch","reset","onSubmit","handleSubmit","Field","component","placeholder","validate","compose","dialogsPage","addMessage","newMessageBody","dialogsElements","dialogs","map","el","messagesElements","messages","dialogsItems","values"],"mappings":"iHACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,iCCD3H,oEAAO,IAAMC,EAAW,SAACC,GAAD,OAAmBA,OAAQC,EAAY,qBAElDC,EAAmB,SAACC,GAAD,OAAuB,SAACH,GACpD,OAASA,EAAMI,QAAUD,EAAlB,wBAAgDA,EAAhD,iBAAsEF,K,yJCApEI,EAA6B,SAAC,GAAwC,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,QAAUC,EAAc,EAAdA,SAE1DC,EAAWH,GAASC,EAE1B,OACI,sBAAKG,UAAS,UAAKC,IAAEC,YAAP,YAAsBH,EAAWE,IAAEL,MAAQ,IAAzD,UACI,8BACKE,IAEJC,GAAY,+BAAOH,QAKnBO,EAA0B,SAACC,GAAW,IACxCC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBT,KADgC,YACVS,EADU,mBAE9C,OAAO,cAACV,EAAD,2BAAiBU,GAAjB,aACH,oDAAcC,GAAWC,QAIpBC,EAAuB,SAACH,GAAW,IACrCC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBT,KAD6B,YACPS,EADO,mBAE3C,OAAO,cAACV,EAAD,2BAAiBU,GAAjB,aACH,iDAAWC,GAAWC,S,6JClBxBE,EAA6B,SAACC,GAChC,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIpB,SAASE,EAAoBC,GAAoC,IAC9DC,EAD6D,4JAE/D,WAAU,IAAD,EAE0BC,KAAKX,MAA7BM,EAFF,EAEEA,OAAWJ,EAFb,0BAIL,OAAKI,EAGE,cAACG,EAAD,eAAeP,IAFX,cAAC,IAAD,CAAUU,GAAG,eAPmC,GACnCC,IAAMJ,WAYtC,OAAOK,YAAQV,EAARU,CAAoCJ,K,oBC3B/C5B,EAAOC,QAAU,CAAC,QAAU,yBAAyB,SAAW,4B,oBCAhED,EAAOC,QAAU,CAAC,aAAe,kCAAkC,OAAS,4BAA4B,OAAS,8B,oBCAjHD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,gBAAkB,mC,gJCQ3FgC,EAAc,SAACf,GACxB,OACI,sBAAKJ,UAAS,UAAKC,IAAEmB,OAAP,YAAiBnB,IAAEoB,QAAjC,UACI,qBACIC,IAAI,+IACJC,IAAI,WACR,cAAC,IAAD,CAASP,GAAE,mBAAcZ,EAAMoB,IAA/B,SAAsCpB,EAAMqB,W,kBCR3CC,EAAU,SAACtB,GAEpB,OAAO,qBAAKJ,UAAWC,IAAE0B,QAAlB,SACH,8BACKvB,EAAMuB,a,4CCoCbC,EAAcrC,YAAiB,MAmB/BsC,EAA6BC,YAAkC,CAACC,KAAM,wBAAyBC,gBAtBjF,SAACC,EAAaC,GAAd,OAChBA,EAASC,YAAM,4BAqBgBL,EAjBgD,SAAC1B,GAEhF,OAAO,uBAAMgC,SAAUhC,EAAMiC,aAAtB,UACH,8BACI,cAACC,EAAA,EAAD,CACIC,UAAWpC,IACXsB,KAAK,iBACLe,YAAY,qBACZC,SAAU,CAACrD,IAAUwC,OAG7B,8BACI,yDC/BGc,sBACXxB,aAdoB,SAACT,GACrB,MAAO,CACHkC,YAAalC,EAAMkC,gBAGA,SAACT,GACxB,MAAO,CACHU,WAAY,SAACC,GACTX,EAASU,YAAWC,SAO5BjC,IAFW8B,EDjBoC,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,YAAgBvC,EAAW,+BAEtE0C,EAAkBH,EAAYI,QAAQC,KAAI,SAAAC,GAAE,OAC9C,cAAC,EAAD,CAEIxB,KAAMwB,EAAGxB,KACTD,GAAIyB,EAAGzB,IAFFyB,EAAGzB,OAIV0B,EAAmBP,EAAYQ,SAASH,KAAI,SAAAC,GAAE,OAChD,cAAC,EAAD,CACItB,QAASsB,EAAGtB,SACPsB,EAAGzB,OAOhB,OACI,sBAAKxB,UAAWC,IAAE8C,QAAlB,UACI,qBAAK/C,UAAWC,IAAEmD,aAAlB,SACKN,IAEL,qBAAK9C,UAAWC,IAAEkD,SAAlB,SACKD,IAEL,cAACrB,EAAD,CAA4BO,SAZd,SAACiB,GACnBjD,EAAMwC,WAAWS,EAAOR","file":"static/js/5.5e2122d1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1eM7x\",\"error\":\"FormsControls_error__3vels\",\"formSummaryError\":\"FormsControls_formSummaryError__1z8YO\"};","export const required = (value: string) => value ? undefined : \"Field is required\";\r\n\r\nexport const maxLengthCreator = (maxLength: string) => (value: string) => {\r\n    return (+value.length > +maxLength) ? `Max length is ${maxLength} symbols` : undefined;\r\n}","import React from \"react\";\r\nimport s from './FormsControls.module.css'\r\n\r\nexport const FormControl: React.FC<any> = ({meta: {error, touched}, children}) => {\r\n\r\n    const hasError = error && touched;\r\n\r\n    return (\r\n        <div className={`${s.formControl} ${hasError ? s.error : ''}`}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<any> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}>\r\n        <textarea {...input} {...restProps}/>\r\n    </FormControl>\r\n}\r\n\r\nexport const Input: React.FC<any> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}>\r\n        <input {...input} {...restProps}/>\r\n    </FormControl>\r\n}","import React from 'react';\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nexport type MapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n};\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStateToPropsForRedirectType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    };\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: React.ComponentType<T>) {\r\n    class RedirectComponent extends React.Component<MapStateToPropsForRedirectType> {\r\n        render() {\r\n\r\n            const {isAuth, ...restProps} = this.props;\r\n\r\n            if (!isAuth) {\r\n                return <Redirect to='/login'/>\r\n            }\r\n            return <Component {...restProps as T}/>\r\n        }\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__ZKL0k\",\"messages\":\"Dialogs_messages__1njig\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsItems\":\"DialogsItem_dialogsItems__bBzrb\",\"dialog\":\"DialogsItem_dialog__1BvBe\",\"active\":\"DialogsItem_active__38HrX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__32uKx\",\"active\":\"Message_active__1OCKq\",\"messageTextArea\":\"Message_messageTextArea__3U_OQ\"};","import React from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport s from './DialogsItem.module.css'\r\n\r\nexport type DialogsItemType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nexport const DialogsItem = (props: DialogsItemType) => {\r\n    return (\r\n        <div className={`${s.dialog} ${s.active}`}>\r\n            <img\r\n                src='https://mpng.subpng.com/20180523/tha/kisspng-businessperson-computer-icons-avatar-clip-art-lattice-5b0508dc6a3a10.0013931115270566044351.jpg'\r\n                alt='avatar'/>\r\n            <NavLink to={`/dialogs/${props.id}`}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport s from './Message.module.css'\r\n\r\nexport type MessageType = {\r\n    message: string\r\n}\r\n\r\nexport const Message = (props: MessageType) => {\r\n\r\n    return <div className={s.message}>\r\n        <div>\r\n            {props.message}\r\n        </div>\r\n    </div>\r\n}","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport {DialogsItem} from \"./DialogItem/DialogsItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm, reset} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\ntype AddMessageFormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = ({dialogsPage, ...props}) => {\r\n\r\n    const dialogsElements = dialogsPage.dialogs.map(el =>\r\n        <DialogsItem\r\n            key={el.id}\r\n            name={el.name}\r\n            id={el.id}\r\n        />);\r\n    const messagesElements = dialogsPage.messages.map(el =>\r\n        <Message\r\n            message={el.message}\r\n            key={el.id}\r\n        />);\r\n\r\n    const addNewMessage = (values: AddMessageFormDataType) => {\r\n        props.addMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n            </div>\r\n            <AddDialogsMessageReduxForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst afterSubmit = (result: any, dispatch: any) =>\r\n    dispatch(reset('dialogsAddMessageForm'));\r\n\r\nconst maxLength50 = maxLengthCreator('50');\r\n\r\nconst AddDialogsMessageForm: React.FC<InjectedFormProps<AddMessageFormDataType>> = (props) => {\r\n\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field\r\n                component={Textarea}\r\n                name='newMessageBody'\r\n                placeholder='Enter your message'\r\n                validate={[required, maxLength50]}\r\n            />\r\n        </div>\r\n        <div>\r\n            <button>Add message</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst AddDialogsMessageReduxForm = reduxForm<AddMessageFormDataType>({form: 'dialogsAddMessageForm', onSubmitSuccess: afterSubmit,})(AddDialogsMessageForm);","import {addMessage, DialogPageType} from \"../../redux/dialogs_reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport React from \"react\";\r\nimport {Dialogs} from \"./Dialogs\";\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: DialogPageType\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addMessage: (newMessageBody: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchToPropsType;\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addMessage: (newMessageBody: string) => {\r\n            dispatch(addMessage(newMessageBody))\r\n        },\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n\r\n"],"sourceRoot":""}