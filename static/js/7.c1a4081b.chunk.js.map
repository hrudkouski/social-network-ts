{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","assets/images/avatar.png","pages/chat/ChatPage.tsx"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageChatForm","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","el","Message","message","id","ref","React","memo","console","log","src","photo","avatarPhoto","alt","width","userName","text","sendMessageText","onChange","disabled","onClick","sendMessage","ChatPage"],"mappings":"6KAIe,SAASA,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAEThB,GAAKM,EAAKW,SAAWjB,GAH8CO,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAmB,EAAA,GAA2BpB,EAAKC,IGLjF,WACb,MAAM,IAAIoB,UAAU,6IHIgF,K,iCILvF,QAA0B,oC,+GCgBnCC,EAAiB,WACrB,IAAMC,EAAWC,cACXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAS/D,OAPAI,qBAAU,WAER,OADAN,EAASO,eACF,WACLP,EAASQ,kBAEV,CAACR,IAEG,qCACO,UAAXE,GAAsB,gFACvB,qCACE,cAACO,EAAD,IACA,cAACC,EAAD,WAMAD,EAAqB,WACzB,IAAME,EAAWR,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKM,YAC3DC,EAAoBC,iBAAuB,MAFlB,EAGSC,oBAAkB,GAH3B,mBAGxBC,EAHwB,KAGVC,EAHU,KAoB/B,OANAV,qBAAU,WACW,IAAD,EAAdS,IACF,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAEtD,CAACR,EAAUI,IAEP,sBAAKK,MAAO,CAACC,OAAQ,QAASC,UAAW,QAASC,SAfnC,SAACC,GACrB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC/EhB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAU7B,UACJL,EAASqB,KAAI,SAACC,GAAD,OAAQ,cAACC,EAAD,CAASC,QAASF,GAASA,EAAGG,OACpD,qBAAKC,IAAKzB,QAIRsB,EAAqDI,IAAMC,MAAK,YAAgB,IAAdJ,EAAa,EAAbA,QAEtE,OADAK,QAAQC,IAAI,sBACL,qCACL,qBAAKC,IAAuB,OAAlBP,EAAQQ,MACZR,EAAQQ,MACRC,IACDC,IAAI,SACJzB,MAAO,CAAC0B,MAAO,UACpB,4BAAIX,EAAQY,WACZ,uBACCZ,EAAQA,QACT,6BAIEzB,EAA+B,WAAO,IAAD,EACTI,mBAAiB,IADR,mBAClCkC,EADkC,KAC5BC,EAD4B,KAEnCjD,EAAWC,cACXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAQ/D,OAAO,gCACL,0BAAUgD,SAAU,SAAA1B,GAAC,OAAIyB,EAAgBzB,EAAEE,cAAchC,QAC/CA,MAAOsD,IACjB,8BACE,cAAC,IAAD,CACIG,SAAqB,UAAXjD,EACVkD,QAZmB,WACpBJ,IACLhD,EAASqD,YAAYL,IACrBC,EAAgB,MAOd,wBAOSK,UAxFY,WACzB,OAAO,8BAAK,cAACvD,EAAD","file":"static/js/7.c1a4081b.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default __webpack_public_path__ + \"static/media/avatar.6acf9f91.png\";","import {Button} from \"antd\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {ChatMessageAPIType} from \"../../api/chatApi\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n  sendMessage,\r\n  startMessagesListening,\r\n  stopMessagesListening\r\n} from \"../../redux/chat_reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport avatarPhoto from \"../../assets/images/avatar.png\";\r\n\r\nconst ChatPage: React.FC = () => {\r\n  return <div><Chat/></div>\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n  const dispatch = useDispatch()\r\n  const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n  useEffect(() => {\r\n    dispatch(startMessagesListening())\r\n    return () => {\r\n      dispatch(stopMessagesListening())\r\n    }\r\n  }, [dispatch])\r\n\r\n  return <>\r\n    {status === 'error' && <div>Some error occurred. Please refresh your page</div>}\r\n    <>\r\n      <Messages/>\r\n      <AddMessageChatForm/>\r\n    </>\r\n\r\n  </>\r\n}\r\n\r\nconst Messages: React.FC = () => {\r\n  const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n  const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n  const [isAutoScroll, setIsAutoScroll] = useState<boolean>(true)\r\n\r\n  const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n    const element = e.currentTarget;\r\n    if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n      !isAutoScroll && setIsAutoScroll(true)\r\n    } else {\r\n      isAutoScroll && setIsAutoScroll(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isAutoScroll) {\r\n      messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n    }\r\n  }, [messages, isAutoScroll])\r\n\r\n  return <div style={{height: '400px', overflowY: \"auto\"}} onScroll={scrollHandler}>\r\n    {messages.map((el) => <Message message={el} key={el.id}/>)}\r\n    <div ref={messagesAnchorRef}/>\r\n  </div>\r\n}\r\n\r\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(({message}) => {\r\n  console.log('>>>>>>>>>>>Message')\r\n  return <>\r\n    <img src={message.photo !== null\r\n        ? message.photo\r\n        : avatarPhoto}\r\n         alt=\"avatar\"\r\n         style={{width: '30px'}}/>\r\n    <b>{message.userName}</b>\r\n    <br/>\r\n    {message.message}\r\n    <hr/>\r\n  </>\r\n})\r\n\r\nconst AddMessageChatForm: React.FC = () => {\r\n  const [text, sendMessageText] = useState<string>('')\r\n  const dispatch = useDispatch()\r\n  const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n  const sendMessageHandler = () => {\r\n    if (!text) return\r\n    dispatch(sendMessage(text))\r\n    sendMessageText('')\r\n  }\r\n\r\n  return <div>\r\n    <textarea onChange={e => sendMessageText(e.currentTarget.value)}\r\n              value={text}/>\r\n    <div>\r\n      <Button\r\n          disabled={status !== 'ready'}\r\n          onClick={sendMessageHandler}>Send</Button>\r\n    </div>\r\n  </div>\r\n}\r\n\r\nexport default ChatPage;"],"sourceRoot":""}