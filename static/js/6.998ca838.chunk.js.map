{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogsItem.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","DialogsItem","name","id","className","s","dialog","active","src","alt","Message","message","maxLength50","maxLengthCreator","AddDialogsMessageReduxForm","reduxForm","form","onSubmitSuccess","result","dispatch","reset","onSubmit","handleSubmit","createField","Textarea","required","compose","dialogsPage","addMessage","newMessageBody","dialogsActions","dialogsElements","dialogs","map","el","messagesElements","messages","dialogsItems","values"],"mappings":"kNAOMA,EAA6B,SAACC,GAClC,MAAO,CACLC,OAAQD,EAAME,KAAKD,SAIhB,SAASE,EAAsBC,GAOpC,OAAOC,YAAQN,EAARM,EANP,SAA2BC,GAAsB,IACxCL,EAAwBK,EAAxBL,OAAWM,EAD4B,YACfD,EADe,YAE9C,OAAKL,EACE,cAACG,EAAD,eAAeG,IADF,cAAC,IAAD,CAAUC,GAAG,gB,oBCfrCC,EAAOC,QAAU,CAAC,QAAU,yBAAyB,SAAW,4B,oBCAhED,EAAOC,QAAU,CAAC,aAAe,kCAAkC,OAAS,4BAA4B,OAAS,8B,oBCAjHD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,gBAAkB,mC,iJCQ3FC,EAAyC,SAAC,GAKjD,IAHAC,EAGD,EAHCA,KACAC,EAED,EAFCA,GAGJ,OACI,sBAAKC,UAAS,UAAKC,IAAEC,OAAP,YAAiBD,IAAEE,QAAjC,UACE,qBACIC,IAAI,+IACJC,IAAI,WACR,cAAC,IAAD,CAASX,GAAE,mBAAcK,GAAzB,SAAgCD,Q,kBCb3BQ,EAAiC,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAE9C,OAAO,qBAAKP,UAAWC,IAAEM,QAAlB,SACL,8BACGA,O,kCCqCDC,EAAcC,YAAiB,MAc/BC,EAA6BC,YAAkC,CACnEC,KAAM,wBACNC,gBAnBkB,SAACC,EAAaC,GAAd,OAChBA,EAASC,YAAM,4BAgBgBL,EAZgD,SAACnB,GAElF,OAAO,uBAAMyB,SAAUzB,EAAM0B,aAAtB,UACL,8BACGC,YAA0C,iBAAkB,qBAAsBC,IAAU,CAACC,IAAUb,MAE1G,8BACE,yDCxBSc,sBACX/B,aAdoB,SAACL,GACvB,MAAO,CACLqC,YAAarC,EAAMqC,gBAGI,SAACR,GAC1B,MAAO,CACLS,WAAY,SAACC,GACXV,EAASW,IAAeF,WAAWC,SAOrCpC,IAFWiC,EDpBoC,SAAC,GAK9C,IAHAC,EAGD,EAHCA,YACG/B,EAEJ,+BAEGmC,EAAkBJ,EAAYK,QAAQC,KAAI,SAAAC,GAAE,OAC9C,cAAC,EAAD,CAAyBhC,KAAMgC,EAAGhC,KAAMC,GAAI+B,EAAG/B,IAA7B+B,EAAG/B,OAEnBgC,EAAmBR,EAAYS,SAASH,KAAI,SAAAC,GAAE,OAChD,cAAC,EAAD,CAASvB,QAASuB,EAAGvB,SAAcuB,EAAG/B,OAM1C,OACI,sBAAKC,UAAWC,IAAE2B,QAAlB,UACE,qBAAK5B,UAAWC,IAAEgC,aAAlB,SACGN,IAEH,qBAAK3B,UAAWC,IAAE+B,SAAlB,SACGD,IAEH,cAACrB,EAAD,CAA4BO,SAZZ,SAACiB,GACrB1C,EAAMgC,WAAWU,EAAOT","file":"static/js/6.998ca838.chunk.js","sourcesContent":["import React from 'react';\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToPropsForRedirect>\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType) => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(Component: React.ComponentType<WCP>) {\r\n  function RedirectComponent(props: MapPropsType) {\r\n    const {isAuth, ...restProps} = props;\r\n    if (!isAuth) return <Redirect to='/login'/>\r\n    return <Component {...restProps as WCP}/>\r\n  }\r\n\r\n  return connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__ZKL0k\",\"messages\":\"Dialogs_messages__1njig\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsItems\":\"DialogsItem_dialogsItems__bBzrb\",\"dialog\":\"DialogsItem_dialog__1BvBe\",\"active\":\"DialogsItem_active__38HrX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__32uKx\",\"active\":\"Message_active__1OCKq\",\"messageTextArea\":\"Message_messageTextArea__3U_OQ\"};","import React from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport s from './DialogsItem.module.css'\r\n\r\nexport type DialogsItemType = {\r\n  name: string\r\n  id: number\r\n}\r\n\r\nexport const DialogsItem: React.FC<DialogsItemType> = (\r\n    {\r\n      name,\r\n      id,\r\n    }\r\n) => {\r\n  return (\r\n      <div className={`${s.dialog} ${s.active}`}>\r\n        <img\r\n            src='https://mpng.subpng.com/20180523/tha/kisspng-businessperson-computer-icons-avatar-clip-art-lattice-5b0508dc6a3a10.0013931115270566044351.jpg'\r\n            alt='avatar'/>\r\n        <NavLink to={`/dialogs/${id}`}>{name}</NavLink>\r\n      </div>\r\n  )\r\n}\r\n\r\n","import React from 'react'\r\nimport s from './Message.module.css'\r\n\r\nexport type MessageType = {\r\n  message: string\r\n}\r\n\r\nexport const Message: React.FC<MessageType> = ({message}) => {\r\n\r\n  return <div className={s.message}>\r\n    <div>\r\n      {message}\r\n    </div>\r\n  </div>\r\n}","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport {DialogsItem} from \"./DialogItem/DialogsItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {InjectedFormProps, reduxForm, reset} from \"redux-form\";\r\nimport {createField, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\ntype AddMessageFormDataType = {\r\n  newMessageBody: string\r\n}\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = (\r\n    {\r\n      dialogsPage,\r\n      ...props\r\n    }\r\n) => {\r\n\r\n  const dialogsElements = dialogsPage.dialogs.map(el =>\r\n      <DialogsItem key={el.id} name={el.name} id={el.id}/>);\r\n\r\n  const messagesElements = dialogsPage.messages.map(el =>\r\n      <Message message={el.message} key={el.id}/>);\r\n\r\n  const addNewMessage = (values: AddMessageFormDataType) => {\r\n    props.addMessage(values.newMessageBody)\r\n  }\r\n\r\n  return (\r\n      <div className={s.dialogs}>\r\n        <div className={s.dialogsItems}>\r\n          {dialogsElements}\r\n        </div>\r\n        <div className={s.messages}>\r\n          {messagesElements}\r\n        </div>\r\n        <AddDialogsMessageReduxForm onSubmit={addNewMessage}/>\r\n      </div>\r\n  )\r\n}\r\n\r\ntype NewMessageFormValuesTypeKeys = Extract<keyof AddMessageFormDataType, string>\r\n\r\nconst afterSubmit = (result: any, dispatch: any) =>\r\n    dispatch(reset('dialogsAddMessageForm'));\r\n\r\nconst maxLength50 = maxLengthCreator('50');\r\n\r\nconst AddDialogsMessageForm: React.FC<InjectedFormProps<AddMessageFormDataType>> = (props) => {\r\n\r\n  return <form onSubmit={props.handleSubmit}>\r\n    <div>\r\n      {createField<NewMessageFormValuesTypeKeys>('newMessageBody', 'Enter your message', Textarea, [required, maxLength50])}\r\n    </div>\r\n    <div>\r\n      <button>Add message</button>\r\n    </div>\r\n  </form>\r\n}\r\n\r\nconst AddDialogsMessageReduxForm = reduxForm<AddMessageFormDataType>({\r\n  form: 'dialogsAddMessageForm',\r\n  onSubmitSuccess: afterSubmit,\r\n})(AddDialogsMessageForm);","import {\r\n  DialogPageInitialStateType,\r\n  dialogsActions\r\n} from \"../../redux/dialogs_reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport React from \"react\";\r\nimport {Dialogs} from \"./Dialogs\";\r\n\r\ntype MapStatePropsType = {\r\n  dialogsPage: DialogPageInitialStateType\r\n}\r\ntype MapDispatchToPropsType = {\r\n  addMessage: (newMessageBody: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchToPropsType;\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n  return {\r\n    addMessage: (newMessageBody: string) => {\r\n      dispatch(dialogsActions.addMessage(newMessageBody))\r\n    },\r\n  }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n\r\n"],"sourceRoot":""}