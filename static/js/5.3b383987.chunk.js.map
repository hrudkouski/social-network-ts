{"version":3,"sources":["assets/images/avatar.png","components/Users/Users.module.css","common/Paginator/Paginator.module.css","components/Users/User/User.module.css","redux/users_selectors.ts","common/Paginator/Paginator.tsx","components/Users/User/User.tsx","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersPage.tsx"],"names":["module","exports","getUsers","createSelector","state","usersPage","users","getPageSize","pageSize","getCurrentPage","currentPage","getTotalUserCount","totalUserCount","getIsFetching","isFetching","getFollowingInProgress","followingInProgress","getUsersFilter","filter","Paginator","onPageChanged","totalItemCount","portionSize","useState","portionNumber","setPortionNumber","pagesCount","Math","ceil","portionCount","leftPortionPageNumber","rightPortionPageNumber","pages","i","push","className","s","paginator","onClick","p","map","el","index","classnames","selectedPage","page","User","user","unFollow","follow","style","marginBottom","to","id","photo","src","photos","small","avatarPhoto","alt","button","followed","disabled","some","name","status","usersSearchFormValidate","UsersSearchForm","React","memo","onFilterChanged","useSelector","enableReinitialize","initialValues","term","friend","String","validate","onSubmit","values","setSubmitting","isSubmitting","type","as","value","Users","dispatch","useDispatch","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","actualFilter","Number","getResponseUsers","query","pathname","userID","usersActions","followUser","unFollowUser","wrapper","textAlign","pageNumber","setCurrentPage","UsersPage","Preloader"],"mappings":"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","file":"static/js/5.3b383987.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/avatar.6acf9f91.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Users_wrapper__3U46F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__8dAXu\",\"page\":\"Paginator_page__2nPr0\",\"selectedPage\":\"Paginator_selectedPage__31wl_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"User_photo__2_uGu\",\"userProfile\":\"User_userProfile__Qp54x\",\"page\":\"User_page__3z_-w\",\"selectedPage\":\"User_selectedPage__3DL_6\",\"unFollow\":\"User_unFollow__2UVEC\",\"follow\":\"User_follow__1s7TM\",\"button\":\"User_button__2xesj\"};","import {AppStateType} from \"./redux-store\";\r\nimport {createSelector} from \"reselect\";\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n  return state.usersPage.users\r\n};\r\nexport const getUsers = createSelector(getUsersSelector,\r\n    (users) => {\r\n      return users;\r\n    });\r\n\r\nexport const getPageSelector = (state: AppStateType) => {\r\n  return state.usersPage.pageSize\r\n}\r\nexport const getPageSize = createSelector(getPageSelector, (pageSize) => {\r\n  return pageSize;\r\n});\r\n\r\nexport const getCurrentPageSelector = (state: AppStateType) => {\r\n  return state.usersPage.currentPage\r\n}\r\nexport const getCurrentPage = createSelector(getCurrentPageSelector, (currentPage) => {\r\n  return currentPage\r\n});\r\n\r\nexport const getTotalUserCountSelector = (state: AppStateType) => {\r\n  return state.usersPage.totalUserCount\r\n}\r\nexport const getTotalUserCount = createSelector(getTotalUserCountSelector, (totalUserCount) => {\r\n  return totalUserCount;\r\n})\r\n\r\nexport const getIsFetchingSelector = (state: AppStateType) => {\r\n  return state.usersPage.isFetching\r\n}\r\nexport const getIsFetching = createSelector(getIsFetchingSelector, (isFetching) => {\r\n  return isFetching;\r\n});\r\n\r\nexport const getFollowingInProgressSelector = (state: AppStateType) => {\r\n  return state.usersPage.followingInProgress\r\n}\r\nexport const getFollowingInProgress = createSelector(getFollowingInProgressSelector, (followingInProgress) => {\r\n  return followingInProgress;\r\n})\r\n\r\n// export const getUsersFilterSelector = (state: AppStateType) => {\r\n//   return state.usersPage.filter\r\n// }\r\n// export const getUsersFilter = createSelector(getUsersFilterSelector, (filter) => {\r\n//   return filter;\r\n// })\r\n\r\nexport const getUsersFilter = (state: AppStateType) => state.usersPage.filter;\r\n\r\n","import s from \"../Paginator/Paginator.module.css\";\r\nimport React, {useState} from \"react\";\r\nimport classnames from 'classnames';\r\n\r\ntype PaginatorPropsType = {\r\n  onPageChanged: (pageNumber: number) => void\r\n  currentPage: number\r\n  totalItemCount: number\r\n  pageSize: number\r\n  portionSize: number\r\n}\r\n\r\nexport const Paginator: React.FC<PaginatorPropsType> = (\r\n    {\r\n      onPageChanged,\r\n      currentPage,\r\n      totalItemCount,\r\n      pageSize,\r\n      portionSize = 10\r\n    }: PaginatorPropsType) => {\r\n\r\n  const [portionNumber, setPortionNumber] = useState<number>(1);\r\n  const pagesCount = Math.ceil(totalItemCount / pageSize);\r\n  const portionCount = Math.ceil(pagesCount / portionSize);\r\n  const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n  const rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n  const pages = [];\r\n  for (let i = 1; i <= pagesCount; i++) {\r\n    pages.push(i)\r\n  }\r\n\r\n  return (\r\n      <div className={s.paginator}>\r\n        {portionNumber > 1 &&\r\n        <button onClick={() => {\r\n          setPortionNumber(portionNumber - 1)\r\n        }}>PREV</button>}\r\n        {\r\n          pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n              .map((el, index) => {\r\n                const setCurrentPageHandler = () => onPageChanged(el);\r\n                return (\r\n                    <span\r\n                        onClick={setCurrentPageHandler}\r\n                        // className={`${el === currentPage\r\n                        //     ? s.selectedPage\r\n                        //     : s.page} ${s.page}`}\r\n                        className={classnames({\r\n                          [s.selectedPage]: el === currentPage\r\n                        }, s.page)}\r\n                        key={index}>\r\n                                {el}\r\n                            </span>\r\n                )\r\n              })\r\n        }\r\n        {portionCount > portionNumber &&\r\n        <button onClick={() => {\r\n          setPortionNumber(portionNumber + 1)\r\n        }}>NEXT</button>}\r\n      </div>\r\n  )\r\n}","import React from 'react';\r\nimport s from \"./User.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport avatarPhoto from \"../../../assets/images/avatar.png\";\r\nimport {UserType} from \"../../../redux/users_reducer\";\r\n\r\ntype UserPropsType = {\r\n  user: UserType\r\n  followingInProgress: Array<number>\r\n  unFollow: (userID: number) => void\r\n  follow: (userID: number) => void\r\n}\r\nexport const User: React.FC<UserPropsType> = (\r\n    {\r\n      user,\r\n      followingInProgress,\r\n      unFollow,\r\n      follow\r\n    }\r\n) => {\r\n\r\n  return (\r\n      <div style={{marginBottom: '15px'}}>\r\n        <>\r\n          <div>\r\n            <NavLink to={\"/profile/\" + user.id}>\r\n              <img\r\n                  className={s.photo}\r\n                  src={user.photos.small !== null\r\n                      ? user.photos.small\r\n                      : avatarPhoto}\r\n                  alt=\"avatar\"\r\n              />\r\n            </NavLink>\r\n          </div>\r\n\r\n          <div className={s.button}>\r\n            {user.followed\r\n                ? <button\r\n                    disabled={followingInProgress\r\n                        .some(id => id === user.id)}\r\n                    className={s.unFollow}\r\n                    onClick={() => {\r\n                      unFollow(user.id)\r\n                    }}\r\n                >UnFollow</button>\r\n                : <button\r\n                    disabled={followingInProgress\r\n                        .some(id => id === user.id)}\r\n                    className={s.follow}\r\n                    onClick={() => {\r\n                      follow(user.id)\r\n                    }}\r\n                >Follow</button>}\r\n          </div>\r\n        </>\r\n\r\n        <>\r\n          <div>nickName: {user.name}</div>\r\n          <div>status: {user.status || '⛔'}</div>\r\n        </>\r\n      </div>)\r\n}","import {Field, Form, Formik} from \"formik\";\r\nimport React, {FC} from \"react\";\r\nimport {FilterType} from \"../../redux/users_reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getUsersFilter} from \"../../redux/users_selectors\";\r\n\r\ntype PropsType = {\r\n  onFilterChanged: (filter: FilterType) => void\r\n}\r\ntype FriendFormType = 'null' | 'true' | 'false';\r\ntype FormType = {\r\n  term: string\r\n  friend: FriendFormType\r\n}\r\n\r\nconst usersSearchFormValidate = () => {\r\n  return {}\r\n}\r\n\r\nexport const UsersSearchForm: FC<PropsType> = React.memo(({onFilterChanged}) => {\r\n  const filter = useSelector(getUsersFilter)\r\n  const submitForm = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n    const filter: FilterType = {\r\n      term: values.term,\r\n      friend: values.friend === 'null' ? null : values.friend === 'true',\r\n    }\r\n    onFilterChanged(filter)\r\n    setSubmitting(false);\r\n  }\r\n\r\n  return <div>\r\n    <Formik\r\n        enableReinitialize\r\n        initialValues={{\r\n          term: filter.term,\r\n          friend: String(filter.friend) as FriendFormType\r\n        }}\r\n        validate={usersSearchFormValidate}\r\n        onSubmit={submitForm}\r\n    >\r\n      {({isSubmitting}) => (\r\n          <Form>\r\n            <span>Search your friends</span>\r\n            <div>\r\n              <Field type=\"text\" name=\"term\"/>\r\n            </div>\r\n            <div>\r\n              <Field name='friend' as='select'>\r\n                <option value=\"null\">All</option>\r\n                <option value=\"true\">Only followed</option>\r\n                <option value=\"false\">Only unFollowed</option>\r\n              </Field>\r\n            </div>\r\n            <button type=\"submit\" disabled={isSubmitting}>\r\n              Find\r\n            </button>\r\n          </Form>\r\n      )}\r\n    </Formik>\r\n  </div>\r\n})","import React, {FC, useEffect} from 'react';\r\nimport s from \"./Users.module.css\";\r\nimport {FilterType, getResponseUsers, usersActions} from \"../../redux/users_reducer\";\r\nimport {Paginator} from \"../../common/Paginator/Paginator\";\r\nimport {User} from './User/User';\r\nimport {UsersSearchForm} from \"./UsersSearchForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n  getCurrentPage, getFollowingInProgress,\r\n  getPageSize,\r\n  getTotalUserCount, getUsers, getUsersFilter\r\n} from \"../../redux/users_selectors\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport * as queryString from \"querystring\";\r\n\r\ntype UsersPresentType = {}\r\ntype QueryParamsType = {\r\n  term?: string\r\n  friend?: string\r\n  page?: string\r\n}\r\n\r\nexport const Users: FC<UsersPresentType> = () => {\r\n  const totalUserCount = useSelector(getTotalUserCount)\r\n  const currentPage = useSelector(getCurrentPage)\r\n  const pageSize = useSelector(getPageSize)\r\n  const users = useSelector(getUsers)\r\n  const followingInProgress = useSelector(getFollowingInProgress)\r\n  const filter = useSelector(getUsersFilter)\r\n\r\n  const dispatch = useDispatch()\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n\r\n    let actualPage = 1;\r\n    let actualFilter = {term: '', friend: null as null | boolean};\r\n\r\n    if (!!parsed.page) {\r\n      actualPage = Number(parsed.page)\r\n    }\r\n    if (!!parsed.term) {\r\n      actualFilter = {...actualFilter, term: parsed.term as string}\r\n    }\r\n\r\n    switch (parsed.friend) {\r\n      case 'null':\r\n        actualFilter = {...actualFilter, friend: null}\r\n        break;\r\n      case 'true':\r\n        actualFilter = {...actualFilter, friend: true}\r\n        break;\r\n      case 'false':\r\n        actualFilter = {...actualFilter, friend: false}\r\n        break;\r\n    }\r\n\r\n    dispatch(getResponseUsers(actualPage, actualFilter))\r\n  }, [dispatch, history])\r\n\r\n  useEffect(() => {\r\n    const query: QueryParamsType = {}\r\n    if (!!filter.term) query.term = filter.term\r\n    if (filter.friend) query.friend = String(filter.friend)\r\n    if (currentPage !== 1) query.page = String(currentPage)\r\n\r\n    history.push({\r\n      pathname: '/users',\r\n      search: queryString.stringify(query)\r\n    })\r\n  }, [filter, currentPage, history])\r\n\r\n  const onPageChanged = (pageNumber: number) => {\r\n    dispatch(usersActions.setCurrentPage(pageNumber))\r\n    dispatch(getResponseUsers(pageNumber, filter))\r\n  }\r\n  const onFilterChanged = (filter: FilterType) => {\r\n    dispatch(getResponseUsers(1, filter))\r\n  }\r\n  const follow = (userID: number) => {\r\n    dispatch(usersActions.followUser(userID))\r\n  }\r\n  const unFollow = (userID: number) => {\r\n    dispatch(usersActions.unFollowUser(userID))\r\n  }\r\n\r\n  return (\r\n      <div className={s.wrapper}>\r\n        <h2 style={{textAlign: 'center'}}>Users</h2>\r\n        <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n        <Paginator\r\n            portionSize={15}\r\n            totalItemCount={totalUserCount}\r\n            pageSize={pageSize}\r\n            currentPage={currentPage}\r\n            onPageChanged={onPageChanged}/>\r\n        {\r\n          users.map((el, i) => <User\r\n              key={i}\r\n              followingInProgress={followingInProgress}\r\n              unFollow={unFollow}\r\n              follow={follow}\r\n              user={el}/>\r\n          )\r\n        }\r\n      </div>\r\n  )\r\n}","import React from \"react\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getIsFetching} from \"../../redux/users_selectors\";\r\nimport {Users} from \"./Users\";\r\n\r\nconst UsersPage = () => {\r\n  const isFetching = useSelector(getIsFetching)\r\n  return <>\r\n    {isFetching && <Preloader/>}\r\n    <Users/>\r\n  </>\r\n};\r\n\r\nexport default UsersPage;"],"sourceRoot":""}