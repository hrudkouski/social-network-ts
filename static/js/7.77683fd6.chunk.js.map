{"version":3,"sources":["common/FormsControls/FormsControls.module.css","utils/validators/validators.ts","common/FormsControls/FormsControls.tsx","components/Login/Login.tsx"],"names":["module","exports","required","value","undefined","maxLengthCreator","maxLength","length","FormControl","meta","error","touched","children","hasError","className","s","formControl","Textarea","props","input","restProps","Input","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","formSummaryError","validate","component","name","placeholder","type","connect","state","isAuth","auth","isFetching","login","logout","to","formData","email","password","rememberMe"],"mappings":"iHACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,iCCD3H,oEAAO,IAAMC,EAAW,SAACC,GAAD,OAAmBA,OAAQC,EAAY,qBAElDC,EAAmB,SAACC,GAAD,OAAuB,SAACH,GACpD,OAASA,EAAMI,QAAUD,EAAlB,wBAAgDA,EAAhD,iBAAsEF,K,yJCApEI,EAA6B,SAAC,GAAwC,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,QAAUC,EAAc,EAAdA,SAE1DC,EAAWH,GAASC,EAE1B,OACI,sBAAKG,UAAS,UAAKC,IAAEC,YAAP,YAAsBH,EAAWE,IAAEL,MAAQ,IAAzD,UACI,8BACKE,IAEJC,GAAY,+BAAOH,QAKnBO,EAA0B,SAACC,GAAW,IACxCC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBT,KADgC,YACVS,EADU,mBAE9C,OAAO,cAACV,EAAD,2BAAiBU,GAAjB,aACH,oDAAcC,GAAWC,QAIpBC,EAAuB,SAACH,GAAW,IACrCC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBT,KAD6B,YACPS,EADO,mBAE3C,OAAO,cAACV,EAAD,2BAAiBU,GAAjB,aACH,iDAAWC,GAAWC,S,iCC3B9B,4GAqDME,EAAiBC,YAAwB,CAACC,KAAM,SAA/BD,EA7BsC,SAAC,GAA2B,IAA1BE,EAAyB,EAAzBA,aAAcf,EAAW,EAAXA,MACzE,OACI,uBAAMgB,SAAUD,EAAhB,UACKf,GAAS,sBAAMI,UAAWC,IAAEY,iBAAnB,SACLjB,IAEL,cAAC,IAAD,CACIkB,SAAU,CAAC1B,KACX2B,UAAWR,IACXS,KAAK,QACLC,YAAY,UAChB,cAAC,IAAD,CACIH,SAAU,CAAC1B,KACX2B,UAAWR,IACXS,KAAK,WACLC,YAAY,WACZC,KAAM,aACV,cAAC,IAAD,CACIH,UAAWR,IACXS,KAAK,aACLE,KAAK,aAlBb,cAoBI,8BACI,mDAwCDC,uBAPS,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,OACnBE,WAAYH,EAAME,KAAKC,cAIS,CAACC,UAAOC,YAAjCN,EAhCD,SAAC,GAA4C,IAA3CK,EAA0C,EAA1CA,MAAOH,EAAmC,EAAnCA,OAAQE,EAA2B,EAA3BA,WAM3B,OAAIF,EACO,cAAC,IAAD,CAAUK,GAAE,kBAGnBH,EACO,cAAC,IAAD,IAGJ,qCACH,+CACA,cAACf,EAAD,CAAgBI,SAdH,SAACe,GACdH,EAAMG,EAASC,MAAOD,EAASE,SAAUF,EAASG","file":"static/js/7.77683fd6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1eM7x\",\"error\":\"FormsControls_error__3vels\",\"formSummaryError\":\"FormsControls_formSummaryError__1z8YO\"};","export const required = (value: string) => value ? undefined : \"Field is required\";\r\n\r\nexport const maxLengthCreator = (maxLength: string) => (value: string) => {\r\n    return (+value.length > +maxLength) ? `Max length is ${maxLength} symbols` : undefined;\r\n}","import React from \"react\";\r\nimport s from './FormsControls.module.css'\r\n\r\nexport const FormControl: React.FC<any> = ({meta: {error, touched}, children}) => {\r\n\r\n    const hasError = error && touched;\r\n\r\n    return (\r\n        <div className={`${s.formControl} ${hasError ? s.error : ''}`}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<any> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}>\r\n        <textarea {...input} {...restProps}/>\r\n    </FormControl>\r\n}\r\n\r\nexport const Input: React.FC<any> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}>\r\n        <input {...input} {...restProps}/>\r\n    </FormControl>\r\n}","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login, logout} from \"../../redux/auth_reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport s from '../../common/FormsControls/FormsControls.module.css'\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\n\r\ntype LoginType = {\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n    logout: () => void\r\n    isAuth: boolean\r\n    isFetching: boolean\r\n}\r\n\r\nexport type FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {error && <span className={s.formSummaryError}>\r\n                {error}\r\n            </span>}\r\n            <Field\r\n                validate={[required]}\r\n                component={Input}\r\n                name='email'\r\n                placeholder='email'/>\r\n            <Field\r\n                validate={[required]}\r\n                component={Input}\r\n                name='password'\r\n                placeholder='password'\r\n                type={'password'}/>\r\n            <Field\r\n                component={Input}\r\n                name='rememberMe'\r\n                type='checkbox'/>\r\n            remember me\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm);\r\n\r\nconst Login = ({login, isAuth, isFetching}: LoginType) => {\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={`/profile/5513`}/>\r\n    }\r\n\r\n    if (isFetching) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return <>\r\n        <h1>Please, login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit}/>\r\n    </>\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    isFetching: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        isFetching: state.auth.isFetching,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {login, logout})(Login);"],"sourceRoot":""}