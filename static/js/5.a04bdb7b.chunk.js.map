{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogsItem.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","restProps","to","React","connect","module","exports","DialogsItem","className","s","dialog","active","src","alt","id","name","Message","message","maxLength50","maxLengthCreator","AddDialogsMessageReduxForm","reduxForm","form","onSubmitSuccess","result","dispatch","reset","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","compose","dialogsPage","addMessage","newMessageBody","dialogsElements","dialogs","map","el","messagesElements","messages","dialogsItems","values"],"mappings":"0PASMA,EAA6B,SAACC,GAChC,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIpB,SAASE,EAAoBC,GAAoC,IAC9DC,EAD6D,4JAE/D,WAAU,IAAD,EAE0BC,KAAKC,MAA7BN,EAFF,EAEEA,OAAWO,EAFb,0BAIL,OAAKP,EAGE,cAACG,EAAD,eAAeI,IAFX,cAAC,IAAD,CAAUC,GAAG,eAPmC,GACnCC,IAAMN,WAYtC,OAAOO,YAAQZ,EAARY,CAAoCN,K,oBC3B/CO,EAAOC,QAAU,CAAC,QAAU,yBAAyB,SAAW,4B,oBCAhED,EAAOC,QAAU,CAAC,aAAe,kCAAkC,OAAS,4BAA4B,OAAS,8B,oBCAjHD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,gBAAkB,mC,gJCQ3FC,EAAc,SAACP,GACxB,OACI,sBAAKQ,UAAS,UAAKC,IAAEC,OAAP,YAAiBD,IAAEE,QAAjC,UACI,qBACIC,IAAI,+IACJC,IAAI,WACR,cAAC,IAAD,CAASX,GAAE,mBAAcF,EAAMc,IAA/B,SAAsCd,EAAMe,W,kBCR3CC,EAAU,SAAChB,GAEpB,OAAO,qBAAKQ,UAAWC,IAAEQ,QAAlB,SACH,8BACKjB,EAAMiB,a,yCCoCbC,EAAcC,YAAiB,MAmB/BC,EAA6BC,YAAkC,CAACC,KAAM,wBAAyBC,gBAtBjF,SAACC,EAAaC,GAAd,OAChBA,EAASC,YAAM,4BAqBgBL,EAjBgD,SAACrB,GAEhF,OAAO,uBAAM2B,SAAU3B,EAAM4B,aAAtB,UACH,8BACI,cAACC,EAAA,EAAD,CACIC,UAAWC,IACXhB,KAAK,iBACLiB,YAAY,qBACZC,SAAU,CAACC,IAAUhB,OAG7B,8BACI,yDC/BGiB,sBACX/B,aAdoB,SAACX,GACrB,MAAO,CACH2C,YAAa3C,EAAM2C,gBAGA,SAACX,GACxB,MAAO,CACHY,WAAY,SAACC,GACTb,EAASY,YAAWC,SAO5B1C,IAFWuC,EDjBoC,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,YAAgBpC,EAAW,+BAEtEuC,EAAkBH,EAAYI,QAAQC,KAAI,SAAAC,GAAE,OAC9C,cAAC,EAAD,CAEI3B,KAAM2B,EAAG3B,KACTD,GAAI4B,EAAG5B,IAFF4B,EAAG5B,OAIV6B,EAAmBP,EAAYQ,SAASH,KAAI,SAAAC,GAAE,OAChD,cAAC,EAAD,CACIzB,QAASyB,EAAGzB,SACPyB,EAAG5B,OAOhB,OACI,sBAAKN,UAAWC,IAAE+B,QAAlB,UACI,qBAAKhC,UAAWC,IAAEoC,aAAlB,SACKN,IAEL,qBAAK/B,UAAWC,IAAEmC,SAAlB,SACKD,IAEL,cAACvB,EAAD,CAA4BO,SAZd,SAACmB,GACnB9C,EAAMqC,WAAWS,EAAOR","file":"static/js/5.a04bdb7b.chunk.js","sourcesContent":["import React from 'react';\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nexport type MapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n};\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStateToPropsForRedirectType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    };\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: React.ComponentType<T>) {\r\n    class RedirectComponent extends React.Component<MapStateToPropsForRedirectType> {\r\n        render() {\r\n\r\n            const {isAuth, ...restProps} = this.props;\r\n\r\n            if (!isAuth) {\r\n                return <Redirect to='/login'/>\r\n            }\r\n            return <Component {...restProps as T}/>\r\n        }\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__ZKL0k\",\"messages\":\"Dialogs_messages__1njig\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsItems\":\"DialogsItem_dialogsItems__bBzrb\",\"dialog\":\"DialogsItem_dialog__1BvBe\",\"active\":\"DialogsItem_active__38HrX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__32uKx\",\"active\":\"Message_active__1OCKq\",\"messageTextArea\":\"Message_messageTextArea__3U_OQ\"};","import React from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport s from './DialogsItem.module.css'\r\n\r\nexport type DialogsItemType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nexport const DialogsItem = (props: DialogsItemType) => {\r\n    return (\r\n        <div className={`${s.dialog} ${s.active}`}>\r\n            <img\r\n                src='https://mpng.subpng.com/20180523/tha/kisspng-businessperson-computer-icons-avatar-clip-art-lattice-5b0508dc6a3a10.0013931115270566044351.jpg'\r\n                alt='avatar'/>\r\n            <NavLink to={`/dialogs/${props.id}`}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport s from './Message.module.css'\r\n\r\nexport type MessageType = {\r\n    message: string\r\n}\r\n\r\nexport const Message = (props: MessageType) => {\r\n\r\n    return <div className={s.message}>\r\n        <div>\r\n            {props.message}\r\n        </div>\r\n    </div>\r\n}","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport {DialogsItem} from \"./DialogItem/DialogsItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm, reset} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\ntype AddMessageFormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = ({dialogsPage, ...props}) => {\r\n\r\n    const dialogsElements = dialogsPage.dialogs.map(el =>\r\n        <DialogsItem\r\n            key={el.id}\r\n            name={el.name}\r\n            id={el.id}\r\n        />);\r\n    const messagesElements = dialogsPage.messages.map(el =>\r\n        <Message\r\n            message={el.message}\r\n            key={el.id}\r\n        />);\r\n\r\n    const addNewMessage = (values: AddMessageFormDataType) => {\r\n        props.addMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n            </div>\r\n            <AddDialogsMessageReduxForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst afterSubmit = (result: any, dispatch: any) =>\r\n    dispatch(reset('dialogsAddMessageForm'));\r\n\r\nconst maxLength50 = maxLengthCreator('50');\r\n\r\nconst AddDialogsMessageForm: React.FC<InjectedFormProps<AddMessageFormDataType>> = (props) => {\r\n\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field\r\n                component={Textarea}\r\n                name='newMessageBody'\r\n                placeholder='Enter your message'\r\n                validate={[required, maxLength50]}\r\n            />\r\n        </div>\r\n        <div>\r\n            <button>Add message</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst AddDialogsMessageReduxForm = reduxForm<AddMessageFormDataType>({form: 'dialogsAddMessageForm', onSubmitSuccess: afterSubmit,})(AddDialogsMessageForm);","import {addMessage, DialogPageType} from \"../../redux/dialogs_reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport React from \"react\";\r\nimport {Dialogs} from \"./Dialogs\";\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: DialogPageType\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addMessage: (newMessageBody: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchToPropsType;\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addMessage: (newMessageBody: string) => {\r\n            dispatch(addMessage(newMessageBody))\r\n        },\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n\r\n"],"sourceRoot":""}