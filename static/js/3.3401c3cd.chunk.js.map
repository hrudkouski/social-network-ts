{"version":3,"sources":["hoc/withAuthRedirect.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Profile/ProfileInfo/ProfileInfo.module.css","assets/images/avatar.png","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileStatus.module.css","components/Profile/ProfileInfo/ProfileContacts/ProfileStatus.module.css","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileContacts/ProfileContacts.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","restProps","to","React","connect","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","Post","className","s","item","src","alt","message","likesCount","MyPosts","memo","postsElements","profilePage","posts","map","el","id","myPosts","AddNewPostReduxForm","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPostsContainer","dispatch","newPostMessage","ProfileStatusWithHooks","profileStatus","updateStatus","isOwner","useState","editMode","setEditMode","status","setStatus","useEffect","wrapperStatus","type","autoFocus","onBlur","onChange","e","currentTarget","onDoubleClick","Contacts","contactTitle","contactValue","p","wrapper","href","rel","target","title","ProfileData","titleText","profileUser","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","keys","contacts","key","ProfileDataForm","setEditProfile","error","savePhoto","changeAvatar","files","createField","Input","style","backgroundColor","onClick","color","ProfileInfo","editProfile","Preloader","profileInfo","description","photos","large","avatarPhoto","formData","saveProfile","initialValues","Profile","AppContent","ProfileContainer","userID","Number","match","params","authorizedUserID","history","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","userId","withRouter"],"mappings":"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","file":"static/js/3.3401c3cd.chunk.js","sourcesContent":["import React from 'react';\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nexport type MapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n};\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStateToPropsForRedirectType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    };\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: React.ComponentType<T>) {\r\n    class RedirectComponent extends React.Component<MapStateToPropsForRedirectType> {\r\n        render() {\r\n\r\n            const {isAuth, ...restProps} = this.props;\r\n\r\n            if (!isAuth) {\r\n                return <Redirect to='/login'/>\r\n            }\r\n            return <Component {...restProps as T}/>\r\n        }\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__QX6hI\",\"description\":\"ProfileInfo_description__7BwXD\",\"titleText\":\"ProfileInfo_titleText__272N1\",\"contactsIcons\":\"ProfileInfo_contactsIcons__2wTtr\"};","export default __webpack_public_path__ + \"static/media/avatar.6acf9f91.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__2jUb1\",\"posts\":\"MyPosts_posts__2aDkj\",\"myPostTextarea\":\"MyPosts_myPostTextarea__2j9QW\",\"error\":\"MyPosts_error__3N99d\",\"errorText\":\"MyPosts_errorText__KcuBn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2xhvo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppContent\":\"Profile_AppContent__1VRAT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperStatus\":\"ProfileStatus_wrapperStatus__8Mzl6\",\"titleText\":\"ProfileStatus_titleText__3568w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ProfileStatus_wrapper__2t7io\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport const Post: React.FC<PostPropsType> = (props) => {\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src='https://mpng.subpng.com/20180523/tha/kisspng-businessperson-computer-icons-avatar-clip-art-lattice-5b0508dc6a3a10.0013931115270566044351.jpg'\r\n                alt='avatar'/>\r\n            <div>{props.message}</div>\r\n            <div>\r\n                <span>&#9825; - {props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport {Post} from \"./Post/Post\";\r\nimport {MyPostPropsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../../common/FormsControls/FormsControls\";\r\n\r\ntype AddMessageFormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nexport const MyPosts: React.FC<MyPostPropsType> = React.memo((props) => {\r\n\r\n    let postsElements = props.profilePage.posts.map(el => {\r\n            return (\r\n                <Post\r\n                    key={el.id}\r\n                    message={el.message}\r\n                    likesCount={el.likesCount}/>\r\n            )\r\n        }\r\n    );\r\n\r\n    const onAddPost = (values: AddMessageFormDataType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.myPosts}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <AddNewPostReduxForm onSubmit={onAddPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst maxLength10 = maxLengthCreator('10');\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddMessageFormDataType>> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field\r\n                component={Textarea}\r\n                name='newPostText'\r\n                placeholder='Enter your post'\r\n                validate={[required, maxLength10]}\r\n            />\r\n        </div>\r\n        <div>\r\n            <button>Add post</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<AddMessageFormDataType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm);","import {addPost, ProfilePageType} from \"../../../redux/profile_reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapStateToPropsType = {\r\n    profilePage: ProfilePageType\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newPostMessage: string) => void\r\n}\r\n\r\nexport type MyPostPropsType = MapStateToPropsType & MapDispatchToPropsType;\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostMessage: string) => {\r\n            dispatch(addPost(newPostMessage))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from './ProfileStatus.module.css';\r\n\r\ntype ProfileStatusType = {\r\n    profileStatus: string\r\n    updateStatus: (newStatus: string) => void\r\n    isOwner: boolean\r\n}\r\n\r\nexport const ProfileStatusWithHooks = ({profileStatus, updateStatus, isOwner}: ProfileStatusType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(profileStatus);\r\n\r\n    useEffect(() => {\r\n        setStatus(profileStatus)\r\n    }, [profileStatus])\r\n\r\n    const activateEditModeHandler = () => {\r\n        if (isOwner) setEditMode(true);\r\n    }\r\n\r\n    const deActivateEditModeHandler = () => {\r\n        updateStatus(status);\r\n        setEditMode(false);\r\n    }\r\n\r\n    const changeProfileStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return <div className={s.wrapperStatus}>\r\n        {editMode\r\n            ? <div>\r\n                <input\r\n                    value={status}\r\n                    type=\"text\"\r\n                    autoFocus\r\n                    onBlur={deActivateEditModeHandler}\r\n                    placeholder='print your status'\r\n                    onChange={changeProfileStatusHandler}\r\n                />\r\n            </div>\r\n            : <div>\r\n                 <span onDoubleClick={activateEditModeHandler}>\r\n                     <b>Status: </b> {status || 'the user didn\\'t write a status...'}\r\n                 </span>\r\n            </div>\r\n        }\r\n    </div>\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport p from './ProfileStatus.module.css'\r\n\r\ntype ContactPropsType = {\r\n  contactTitle: string\r\n  contactValue: string | undefined\r\n}\r\n\r\nexport const Contacts: React.FC<ContactPropsType> = (\r\n    {\r\n      contactTitle,\r\n      contactValue\r\n    }) => {\r\n  return (\r\n      <div className={p.wrapper}>\r\n        <span><i>{contactTitle}</i>:\r\n                <a href={contactValue}\r\n                   rel={'noreferrer'}\r\n                   target={'_blank'}\r\n                   title={'contact ref'}>\r\n                  {contactValue}\r\n                </a>\r\n            </span>\r\n      </div>\r\n  )\r\n}","import React from \"react\";\r\nimport {ContactsType, ProfileUserType} from \"../../../../redux/profile_reducer\";\r\nimport {Contacts} from \"../ProfileContacts/ProfileContacts\";\r\nimport s from \"../ProfileInfo.module.css\";\r\n\r\ntype ProfileDataPropsType = {\r\n  profileUser: ProfileUserType\r\n}\r\n\r\nexport const ProfileData = (props: ProfileDataPropsType) => {\r\n  return <div>\r\n    <div>\r\n      <span className={s.titleText}>Full Name: </span>\r\n      {props.profileUser.fullName}\r\n    </div>\r\n    <div>\r\n      <span className={s.titleText}>About Me: </span>\r\n      {props.profileUser.aboutMe || '...'}\r\n    </div>\r\n    <div>\r\n      <span className={s.titleText}>Looking For A Job: </span>\r\n      {props.profileUser.lookingForAJob ? 'yes' : 'no'}\r\n    </div>\r\n    <div>\r\n      <span className={s.titleText}>My professional skills: </span>\r\n      {props.profileUser.lookingForAJobDescription || '...'}\r\n    </div>\r\n\r\n    <div>\r\n      <b>Contacts:</b>\r\n      {Object.keys(props.profileUser.contacts).map((key) =>\r\n          <Contacts contactTitle={key}\r\n                    key={key}\r\n                    contactValue={props.profileUser.contacts[key as keyof ContactsType]}/>)}\r\n    </div>\r\n  </div>\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport s from '../ProfileInfo.module.css';\r\nimport {\r\n  createField,\r\n  Input,\r\n  Textarea\r\n} from \"../../../../common/FormsControls/FormsControls\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport {ProfileUserType} from \"../../../../redux/profile_reducer\";\r\n\r\nexport type ProfileFormDataType = {\r\n  fullName: string\r\n  lookingForAJob: boolean\r\n  lookingForAJobDescription: string\r\n  aboutMe: string\r\n}\r\n\r\ntype ProfileDataFormPropsType = {\r\n  profileUser: ProfileUserType\r\n  savePhoto: (photo: File) => void\r\n  setEditProfile: (editProfile: boolean) => void\r\n}\r\n\r\nexport const ProfileDataForm = reduxForm<ProfileUserType, ProfileDataFormPropsType>(\r\n    {form: 'edit_profile'})((\r\n    {\r\n      profileUser,\r\n      setEditProfile,\r\n      error,\r\n      savePhoto,\r\n      handleSubmit\r\n    }\r\n) => {\r\n\r\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files?.length) {\r\n      savePhoto(e.target.files[0])\r\n    }\r\n  }\r\n\r\n  return (\r\n      <form onSubmit={handleSubmit}>\r\n        <label className={s.changeAvatar}>\r\n          <b>Change avatar:</b>\r\n          <div>\r\n            <input type=\"file\"\r\n                   placeholder={'Change avatar'}\r\n                   onChange={onMainPhotoSelected}/>\r\n          </div>\r\n        </label>\r\n\r\n        <div>\r\n          <span className={s.titleText}>About Me: </span>\r\n          {createField('aboutMe', 'About Me', Input, [])}\r\n        </div>\r\n\r\n        <div>\r\n          <span className={s.titleText}>Full Name: </span>\r\n          {createField('fullName', 'Full name', Input, [])}\r\n        </div>\r\n\r\n        <div>\r\n          <span className={s.titleText}>My professional skills: </span>\r\n          {createField('lookingForAJobDescription', 'My professional skills', Textarea, [])}\r\n        </div>\r\n\r\n        <div>\r\n          <span className={s.titleText}>Looking For A Job: </span>\r\n          {createField('lookingForAJob', '', Input, [], {type: 'checkbox'})}\r\n        </div>\r\n\r\n        <div>\r\n          <b>Contacts:</b>\r\n          {Object.keys(profileUser.contacts).map((key) => {\r\n                return (\r\n                    <div key={key}>\r\n                      <b>{key} : {createField('contacts.' + key, key, Input, [])}</b>\r\n                    </div>\r\n                )\r\n              }\r\n          )}\r\n        </div>\r\n\r\n        <button style={{backgroundColor: 'green'}} type={'submit'}>Save</button>\r\n        <button style={{backgroundColor: 'red'}} type={'button'}\r\n                onClick={() => setEditProfile(false)}> Cancel\r\n        </button>\r\n\r\n        {error && (\r\n            <span style={{color: 'red'}}>\r\n                {error}\r\n            </span>\r\n        )}\r\n      </form>\r\n  )\r\n})\r\n\r\n","import React, {useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {ProfileUserType} from \"../../../redux/profile_reducer\";\r\nimport {Preloader} from '../../../common/Preloader/Preloader';\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\nimport {ProfileData} from './ProfileData/ProfileData';\r\nimport {ProfileDataForm, ProfileFormDataType} from './ProfileDataForm/ProfileDataForm';\r\nimport avatarPhoto from \"../../../assets/images/avatar.png\";\r\n\r\nexport type ProfileInfoType = {\r\n  profileUser: ProfileUserType | null\r\n  profileStatus: string\r\n  isOwner: boolean\r\n  updateStatus: (newStatus: string) => void\r\n  savePhoto: (photo: File) => void\r\n  saveProfile: (formData: ProfileFormDataType) => void\r\n}\r\n\r\nexport const ProfileInfo = (props: ProfileInfoType) => {\r\n\r\n  const [editProfile, setEditProfile] = useState<boolean>(false)\r\n\r\n  if (!props.profileUser) {\r\n    return <Preloader/>\r\n  }\r\n\r\n  const activateEditModeHandler = () => {\r\n    if (props.isOwner) setEditProfile(true);\r\n  }\r\n\r\n  const onProfileFormSubmit = (formData: ProfileFormDataType) => {\r\n    props.saveProfile(formData)\r\n    setEditProfile(false);\r\n  }\r\n\r\n  return (\r\n      <div className={s.profileInfo}>\r\n        <div className={s.description}>\r\n          <img alt={'avatar'}\r\n               src={props.profileUser.photos.large || avatarPhoto}\r\n          />\r\n\r\n          <div>\r\n            <ProfileStatusWithHooks\r\n                isOwner={props.isOwner}\r\n                updateStatus={props.updateStatus}\r\n                profileStatus={props.profileStatus}\r\n            />\r\n\r\n            {props.isOwner && !editProfile && <button\r\n              onClick={activateEditModeHandler}>\r\n              Edit profile\r\n            </button>}\r\n\r\n            {editProfile\r\n                ? <ProfileDataForm\r\n                    onSubmit={onProfileFormSubmit}\r\n                    initialValues={props.profileUser}\r\n                    savePhoto={props.savePhoto}\r\n                    setEditProfile={setEditProfile}\r\n                    profileUser={props.profileUser}\r\n                />\r\n                : <ProfileData profileUser={props.profileUser}/>}\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n}","import React from 'react';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport s from './Profile.module.css';\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {ProfileUserType} from \"../../redux/profile_reducer\";\r\nimport {ProfileFormDataType} from \"./ProfileInfo/ProfileDataForm/ProfileDataForm\";\r\n\r\nexport type ProfileType = {\r\n  profileUser: ProfileUserType | null\r\n  profileStatus: string\r\n  updateStatus: (newStatus: string) => void\r\n  isOwner: boolean\r\n  savePhoto: (photo: File) => void\r\n  saveProfile: (formData: ProfileFormDataType) => void\r\n}\r\n\r\nexport const Profile = (props: ProfileType) => {\r\n  return (\r\n      <div className={s.AppContent}>\r\n        <ProfileInfo\r\n            saveProfile={props.saveProfile}\r\n            savePhoto={props.savePhoto}\r\n            isOwner={props.isOwner}\r\n            updateStatus={props.updateStatus}\r\n            profileStatus={props.profileStatus}\r\n            profileUser={props.profileUser}/>\r\n        <MyPostsContainer/>\r\n      </div>\r\n  );\r\n}\r\n\r\n","import React from 'react';\r\nimport {Profile} from \"./Profile\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n  getStatus,\r\n  getUserProfile,\r\n  ProfileUserType,\r\n  savePhoto,\r\n  saveProfile,\r\n  updateStatus\r\n} from \"../../redux/profile_reducer\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileFormDataType} from \"./ProfileInfo/ProfileDataForm/ProfileDataForm\";\r\n\r\ntype PathParamsType = {\r\n  userID: string\r\n}\r\ntype MapStatePropsType = {\r\n  profileUser: ProfileUserType | null\r\n  profileStatus: string\r\n  authorizedUserID: number | null\r\n  isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n  getUserProfile: (userID: number) => void\r\n  getStatus: (userID: number) => void\r\n  updateStatus: (newStatus: string) => void\r\n  savePhoto: (photo: File) => void\r\n  saveProfile: (formData: ProfileFormDataType) => void\r\n}\r\nexport type ProfilePropsType = MapStatePropsType & MapDispatchToPropsType;\r\ntype OwnProfilePropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    profileUser: state.profilePage.profileUser,\r\n    profileStatus: state.profilePage.profileStatus,\r\n    authorizedUserID: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n  }\r\n}\r\n\r\nclass ProfileContainer extends React.Component<OwnProfilePropsType> {\r\n\r\n  refreshProfile() {\r\n    let userID = Number(this.props.match.params.userID);\r\n    if (!userID) {\r\n      userID = Number(this.props.authorizedUserID);\r\n      if (!userID) {\r\n        this.props.history.push('/login')\r\n      }\r\n    }\r\n    this.props.getUserProfile(userID);\r\n    this.props.getStatus(userID);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile()\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Readonly<OwnProfilePropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n    if (this.props.match.params.userID !== prevProps.match.params.userID) {\r\n      this.refreshProfile()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <Profile\r\n            {...this.props}\r\n            savePhoto={this.props.savePhoto}\r\n            isOwner={!this.props.match.params.userID}\r\n            profileUser={this.props.profileUser}\r\n            profileStatus={this.props.profileStatus}\r\n            updateStatus={this.props.updateStatus}\r\n            saveProfile={this.props.saveProfile}\r\n        />\r\n    )\r\n  }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n      getUserProfile,\r\n      getStatus,\r\n      updateStatus,\r\n      savePhoto,\r\n      saveProfile,\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect,\r\n)(ProfileContainer);\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}