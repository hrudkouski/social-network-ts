{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","pages/chat/ChatPage.tsx"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","wsChannel","WebSocket","Chat","Messages","AddMessageChatForm","useState","messages","setMessages","useEffect","addEventListener","e","newMessages","JSON","parse","data","prevMessages","style","height","overflowY","map","el","Message","message","src","photo","alt","width","userName","text","sendMessageText","onChange","currentTarget","onClick","send","ChatPage"],"mappings":"6KAIe,SAASA,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAEThB,GAAKM,EAAKW,SAAWjB,GAH8CO,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAmB,EAAA,GAA2BpB,EAAKC,IGLjF,WACb,MAAM,IAAIoB,UAAU,6IHIgF,K,oFIKhGC,EAAY,IAAIC,UAAU,gEAQ1BC,EAAiB,WACrB,OAAO,qCACL,cAACC,EAAD,IACA,cAACC,EAAD,QAIED,EAAqB,WAAO,IAAD,EACCE,mBAA4B,IAD7B,mBACxBC,EADwB,KACdC,EADc,KAU/B,OAPAC,qBAAU,WACRR,EAAUS,iBAAiB,WAAW,SAACC,GACrC,IAAIC,EAAcC,KAAKC,MAAMH,EAAEI,MAC/BP,GAAY,SAACQ,GAAD,4BAAsBA,GAAtB,YAAuCJ,YAEpD,IAEI,qBAAKK,MAAO,CAACC,OAAQ,QAASC,UAAW,QAAzC,SACJZ,EAASa,KAAI,SAACC,EAAIzC,GAAL,OAAW,cAAC0C,EAAD,CAASC,QAASF,GAASzC,SAIlD0C,EAAkD,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAExD,OAAO,qCACL,qBAAKC,IAAKD,EAAQE,MAAOC,IAAI,SAAST,MAAO,CAACU,MAAO,UACrD,4BAAIJ,EAAQK,WACZ,uBACCL,EAAQA,QACT,2BAIElB,EAA+B,WAAO,IAAD,EAETC,mBAAiB,IAFR,mBAElCuB,EAFkC,KAE5BC,EAF4B,KAUzC,OAAO,gCACL,0BAAUC,SAAU,SAAApB,GAAC,OAAImB,EAAgBnB,EAAEqB,cAAcpC,QAC/CA,MAAOiC,IACjB,8BACE,cAAC,IAAD,CAAQI,QAVQ,WACbJ,IACL5B,EAAUiC,KAAKL,GACfC,EAAgB,MAOd,wBAKSK,UA1DY,WACzB,OAAO,8BACL,cAAChC,EAAD","file":"static/js/7.d2c7a05f.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import {Button} from \"antd\";\r\nimport React, {useEffect, useState} from \"react\";\r\n\r\nexport type ChatMessageType = {\r\n  message: string\r\n  photo: string\r\n  userId: number\r\n  userName: string\r\n}\r\n\r\nconst wsChannel = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n\r\nconst ChatPage: React.FC = () => {\r\n  return <div>\r\n    <Chat/>\r\n  </div>\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n  return <>\r\n    <Messages/>\r\n    <AddMessageChatForm/>\r\n  </>\r\n}\r\n\r\nconst Messages: React.FC = () => {\r\n  const [messages, setMessages] = useState<ChatMessageType[]>([])\r\n\r\n  useEffect(() => {\r\n    wsChannel.addEventListener('message', (e: MessageEvent) => {\r\n      let newMessages = JSON.parse(e.data)\r\n      setMessages((prevMessages) => [...prevMessages, ...newMessages])\r\n    })\r\n  }, [])\r\n\r\n  return <div style={{height: '400px', overflowY: \"auto\"}}>\r\n    {messages.map((el, i) => <Message message={el} key={i}/>)}\r\n  </div>\r\n}\r\n\r\nconst Message: React.FC<{ message: ChatMessageType }> = ({message}) => {\r\n\r\n  return <>\r\n    <img src={message.photo} alt=\"avatar\" style={{width: '30px'}}/>\r\n    <b>{message.userName}</b>\r\n    <br/>\r\n    {message.message}\r\n    <hr/>\r\n  </>\r\n}\r\n\r\nconst AddMessageChatForm: React.FC = () => {\r\n\r\n  const [text, sendMessageText] = useState<string>('')\r\n\r\n  const sendMessage = () => {\r\n    if (!text) return\r\n    wsChannel.send(text)\r\n    sendMessageText('')\r\n  }\r\n\r\n  return <div>\r\n    <textarea onChange={e => sendMessageText(e.currentTarget.value)}\r\n              value={text}/>\r\n    <div>\r\n      <Button onClick={sendMessage}>Send</Button>\r\n    </div>\r\n  </div>\r\n}\r\n\r\nexport default ChatPage;"],"sourceRoot":""}