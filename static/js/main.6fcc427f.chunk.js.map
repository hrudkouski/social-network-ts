{"version":3,"sources":["components/News/News.module.css","components/Music/Music.module.css","components/Settings/Settings.module.css","components/FindFriends/FindFriends.module.css","common/Preloader/Preloader.module.css","components/Login/Login.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileStatus.module.css","components/Profile/ProfileInfo/ProfileContacts/ProfileStatus.module.css","components/Dialogs/Message/Message.module.css","components/Users/Users.module.css","components/Navbar/Navbar.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","reportWebVitals.ts","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/FindFriends/FindFriends.tsx","logo.svg","common/Preloader/Preloader.tsx","components/Header/Header.tsx","api/api.ts","redux/auth_reducer.ts","components/Header/HeaderContainer.tsx","redux/app_reducer.ts","redux/profile_reducer.ts","utils/objects-helpers/objects-helpers.ts","redux/users_reducer.ts","redux/dialogs_reducer.ts","redux/sideBar_reducer.ts","redux/redux-store.ts","common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","components/Login/Login.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileContacts/ProfileContacts.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","assets/images/avatar.png","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","hoc/withAuthRedirect.tsx","components/Profile/ProfileContainer.tsx","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","redux/users_selectors.ts","common/Paginator/Paginator.tsx","components/Users/User/User.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","App.tsx","index.tsx","components/Header/Header.module.css","common/FormsControls/FormsControls.module.css","components/Dialogs/Dialogs.module.css","common/Paginator/Paginator.module.css","components/Users/User/User.module.css","App.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Dialogs/DialogItem/DialogsItem.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Navbar","className","s","AppNav","item","activeClassName","active","to","src","alt","News","dialogs","Music","Settings","FindFriends","findFriends","Preloader","ldsRoller","Header","login","isFetching","isAuth","logout","AppHeader","logo","AppLogo","loginBlock","loginTitle","userName","style","marginLeft","onClick","instance","axios","create","withCredentials","headers","baseURL","usersApi","currentPage","get","response","data","id","delete","post","profileApi","userID","userId","newStatus","put","status","photoFile","formData","FormData","append","authApi","email","password","rememberMe","captcha","securityApi","SET_AUTH_USERS_DATA","TOGGLE_IS_FETCHING","GET_CAPTCHA_URL","initialState","captchaURL","setAuthUsersData","type","payload","toggleIsFetching","getCaptchaURLSuccess","getAuthUserData","dispatch","a","resultCode","getCaptchaURL","url","HeaderContainer","this","props","React","Component","compose","connect","state","auth","SET_INITIALIZED","initialized","ADD_POST","SET_USER_PROFILE","SET_PROFILE_STATUS","UPDATE_PROFILE_STATUS","SAVE_PHOTO_SUCCESS","posts","message","likesCount","newPostText","profileUser","profileStatus","setProfileStatus","getUserProfile","updateObjectInArray","items","itemID","objPropName","newObjProps","map","el","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FOLLOWING_PROGRESS","users","pageSize","totalUserCount","followingInProgress","followUser","unFollowUser","setCurrentPage","page","toggleFollowingProgress","progress","followUnFollowFlow","apiMethod","actionCreator","ADD_MESSAGE","name","messages","newMessageText","rootReducer","combineReducers","profilePage","action","newPost","Date","getTime","newPostMessage","photos","photo","dialogsPage","newMessagePost","newMessageBody","usersPage","followed","totalCount","filter","sideBar","form","formReducer","app","value","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleWare","__store__","FormControl","meta","error","touched","children","hasError","formControl","Textarea","input","restProps","Input","createField","placeholder","component","validate","text","Field","required","undefined","maxLengthCreator","maxLength","length","LoginReduxForm","reduxForm","handleSubmit","onSubmit","formSummaryError","LoginPage","useSelector","useDispatch","l","wrapper","href","rel","target","stopSubmit","_error","Post","MyPosts","memo","postsElements","myPosts","AddNewPostReduxForm","values","addPost","maxLength10","MyPostsContainer","ProfileStatusWithHooks","updateStatus","isOwner","useState","editMode","setEditMode","setStatus","useEffect","wrapperStatus","autoFocus","onBlur","onChange","e","currentTarget","onDoubleClick","Contacts","contactTitle","contactValue","p","title","ProfileData","titleText","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Object","keys","contacts","key","ProfileDataForm","setEditProfile","savePhoto","changeAvatar","files","backgroundColor","color","ProfileInfo","editProfile","profileInfo","description","large","avatarPhoto","saveProfile","initialValues","Profile","AppContent","mapStateToPropsForRedirect","withAuthRedirect","RedirectComponent","ProfileContainer","Number","match","params","authorizedUserID","history","push","getStatus","refreshProfile","prevProps","prevState","snapshot","alert","file","Error","getState","Promise","reject","withRouter","DialogsItem","dialog","Message","maxLength50","AddDialogsMessageReduxForm","onSubmitSuccess","result","reset","addMessage","dialogsElements","messagesElements","dialogsItems","getUsers","createSelector","getPageSize","getCurrentPage","getTotalUserCount","getIsFetching","getFollowingInProgress","Paginator","onPageChanged","totalItemCount","portionSize","pagesCount","Math","ceil","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","pages","i","paginator","index","classnames","selectedPage","User","user","unFollow","follow","small","disabled","some","Users","UsersContainer","pageNumber","getResponseUsers","App","initializeApp","AppWrapper","exact","path","render","DialogsContainer","AppContainer","promise","all","MainApp","StrictMode","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.6fcc427f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"news\":\"News_news__ZrF7U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"music\":\"Music_music__LLZrF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"Settings_settings__30q53\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"findFriends\":\"FindFriends_findFriends__3u4U7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldsRoller\":\"Preloader_ldsRoller__2oF8r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Login_wrapper__3ctdC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2xhvo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppContent\":\"Profile_AppContent__1VRAT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperStatus\":\"ProfileStatus_wrapperStatus__8Mzl6\",\"titleText\":\"ProfileStatus_titleText__3568w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ProfileStatus_wrapper__2t7io\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__32uKx\",\"active\":\"Message_active__1OCKq\",\"messageTextArea\":\"Message_messageTextArea__3U_OQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Users_wrapper__3U46F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppNav\":\"Navbar_AppNav__2O-N-\",\"item\":\"Navbar_item__36B1R\",\"active\":\"Navbar_active__GyOf7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__QX6hI\",\"description\":\"ProfileInfo_description__7BwXD\",\"titleText\":\"ProfileInfo_titleText__272N1\",\"contactsIcons\":\"ProfileInfo_contactsIcons__2wTtr\"};","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './Navbar.module.css'\r\n\r\nexport const Navbar = () => {\r\n\r\n    return (\r\n        <nav className={s.AppNav}>\r\n            <div className={s.item}>\r\n                <NavLink activeClassName={s.active} to={\"/profile\"}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink activeClassName={s.active} to={\"/dialogs\"}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink activeClassName={s.active} to={\"/news\"}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink activeClassName={s.active} to={\"/users\"}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink activeClassName={s.active} to={\"/music\"}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink activeClassName={s.active} to={\"/settings\"}>Settings</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink activeClassName={s.active} to={\"/findFriends\"}>Find friends</NavLink>\r\n                <div><img\r\n                    src='https://mpng.subpng.com/20180523/tha/kisspng-businessperson-computer-icons-avatar-clip-art-lattice-5b0508dc6a3a10.0013931115270566044351.jpg'\r\n                    alt=\"Friends\"/>\r\n                    <img\r\n                        src='https://mpng.subpng.com/20180523/tha/kisspng-businessperson-computer-icons-avatar-clip-art-lattice-5b0508dc6a3a10.0013931115270566044351.jpg'\r\n                        alt=\"Friends\"/>\r\n                    <img\r\n                        src='https://mpng.subpng.com/20180523/tha/kisspng-businessperson-computer-icons-avatar-clip-art-lattice-5b0508dc6a3a10.0013931115270566044351.jpg'\r\n                        alt=\"Friends\"/></div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}","import React from 'react'\r\nimport s from './News.module.css'\r\n\r\nexport const News = () => {\r\n    return (\r\n        <div className={s.dialogs}>\r\n            News\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport s from './Music.module.css'\r\n\r\nexport const Music = () => {\r\n    return (\r\n        <div className={s.dialogs}>\r\n            Music\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport s from './Settings.module.css'\r\n\r\nexport const Settings = () => {\r\n    return (\r\n        <div className={s.dialogs}>\r\n            Settings\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport s from './FindFriends.module.css'\r\n\r\nexport const FindFriends = () => {\r\n    return (\r\n        <div className={s.findFriends}>\r\n            FindFriends\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\r\nimport s from './Preloader.module.css'\r\n\r\nexport const Preloader = () => {\r\n    return <div className={s.ldsRoller}>\r\n        <div/>\r\n        <div/>\r\n        <div/>\r\n        <div/>\r\n        <div/>\r\n        <div/>\r\n        <div/>\r\n        <div/>\r\n    </div>\r\n}","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport logo from \"../../logo.svg\";\r\nimport s from './Header.module.css'\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\n\r\ntype HeaderPropsType = {\r\n    login: string | null\r\n    isAuth: boolean\r\n    logout: () => void\r\n    isFetching: boolean\r\n}\r\n\r\nexport const Header: React.FC<HeaderPropsType> = ({login, isFetching, isAuth, logout}) => {\r\n\r\n    if (isFetching) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <header className={s.AppHeader}>\r\n            <img src={logo} className={s.AppLogo} alt=\"logo\"/>\r\n            <div className={s.loginBlock}>\r\n                {isAuth\r\n                    ? <div>\r\n                        <span className={s.loginTitle}>Username: </span>\r\n                        <span className={s.userName}>{login}</span>\r\n                        <button style={{marginLeft: '15px'}} onClick={logout}>LogOut</button>\r\n                    </div>\r\n                    : <NavLink to={'/login'}>\r\n                        Please login to continue\r\n                    </NavLink>\r\n                }\r\n            </div>\r\n        </header>\r\n    );\r\n}","import axios from \"axios\";\r\nimport {ProfileFormDataType} from \"../components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm\";\r\n\r\nconst instance = axios.create({\r\n  withCredentials: true,\r\n  headers: {'API-KEY': '3af7a44d-0a6b-4bf7-b34b-b5730fa5756f'},\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n})\r\n\r\nexport const usersApi = {\r\n  getUsers(currentPage: number) {\r\n    return instance.get(`users?page=${currentPage}&count=10`)\r\n        .then(response => {\r\n          return response.data;\r\n        })\r\n  },\r\n  unFollow(id: number) {\r\n    return instance.delete(`follow/${id}`)\r\n        .then(response => {\r\n          return response.data;\r\n        })\r\n  },\r\n  follow(id: number) {\r\n    return instance.post(`follow/${id}`)\r\n        .then(response => {\r\n          return response.data;\r\n        })\r\n  },\r\n}\r\n\r\nexport const profileApi = {\r\n  getProfile(userID: number | null) {\r\n    return instance.get(`profile/${userID}`)\r\n  },\r\n  getStatus(userId: number) {\r\n    return instance.get(`profile/status/${userId}`)\r\n  },\r\n  updateStatus(newStatus: string) {\r\n    return instance.put(`profile/status`, {status: newStatus})\r\n  },\r\n  savePhoto(photoFile: File) {\r\n    let formData = new FormData();\r\n    formData.append(\"image\", photoFile)\r\n    return instance.put(`profile/photo`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    })\r\n  },\r\n  saveProfile(formData: ProfileFormDataType) {\r\n    return instance.put(`profile`, formData)\r\n  },\r\n}\r\n\r\nexport const authApi = {\r\n  amIsAuth() {\r\n    return instance.get(`auth/me`)\r\n  },\r\n  login(email: string, password: string, rememberMe: boolean = false, captcha: string | null) {\r\n    return instance.post(`auth/login`, {\r\n      email, password, rememberMe, captcha\r\n    })\r\n  },\r\n  logout() {\r\n    return instance.delete(`auth/login`)\r\n  }\r\n}\r\n\r\nexport const securityApi = {\r\n  getCaptcha() {\r\n    return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`)\r\n  },\r\n}\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n  url: string | null\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import {AppThunk} from \"./redux-store\";\r\nimport {authApi, securityApi} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\n// Actions\r\nconst SET_AUTH_USERS_DATA = 'social-network-ts/auth_reducer/SET_AUTH_USERS_DATA';\r\nconst TOGGLE_IS_FETCHING = 'social-network-ts/auth_reducer/TOGGLE_IS_FETCHING';\r\nconst GET_CAPTCHA_URL = 'social-network-ts/auth_reducer/GET_CAPTCHA_URL';\r\n\r\n//Types\r\nexport type AuthPageType = typeof initialState;\r\nexport type AuthActionTypes =\r\n    | ReturnType<typeof setAuthUsersData>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof getCaptchaURLSuccess>\r\n\r\n//Initial State\r\nconst initialState = {\r\n  userId: 5513 as number | null,\r\n  login: 'hrudkouski' as string | null,\r\n  email: 'aprilshower19@gmail.com' as string | null,\r\n  isAuth: false as boolean,\r\n  isFetching: false as boolean,\r\n  captchaURL: null as string | null, // if null, then captcha is not required\r\n}\r\n\r\n// Reducer\r\nexport const authReducer = (state: AuthPageType = initialState, action: AuthActionTypes): AuthPageType => {\r\n  switch (action.type) {\r\n    case SET_AUTH_USERS_DATA:\r\n      return {\r\n        ...state,\r\n        ...action.payload\r\n      }\r\n    case TOGGLE_IS_FETCHING:\r\n      return {...state, isFetching: action.isFetching}\r\n    case GET_CAPTCHA_URL:\r\n      return {...state, ...action.payload}\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// Action Creators\r\nexport const setAuthUsersData = (userId: number | null, login: string | null, email: string | null, isAuth: boolean) => ({\r\n  type: SET_AUTH_USERS_DATA,\r\n  payload: {userId, login, email, isAuth}\r\n} as const)\r\n\r\nexport const toggleIsFetching = (isFetching: boolean) => ({\r\n  type: TOGGLE_IS_FETCHING,\r\n  isFetching\r\n} as const)\r\n\r\nexport const getCaptchaURLSuccess = (captchaURL: string | null) => ({\r\n  type: GET_CAPTCHA_URL,\r\n  payload: {captchaURL}\r\n} as const)\r\n\r\n// Thunk Creators\r\nexport const getAuthUserData = (): AppThunk => {\r\n  return async (dispatch) => {\r\n    dispatch(toggleIsFetching(true));\r\n    let response = await authApi.amIsAuth()\r\n    if (response.data.resultCode === 0) {\r\n      dispatch(toggleIsFetching(false));\r\n      let {id, login, email} = response.data.data;\r\n      dispatch(setAuthUsersData(id, login, email, true));\r\n    }\r\n  }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string | null): AppThunk => {\r\n  return async (dispatch) => {\r\n    dispatch(toggleIsFetching(true));\r\n    let response = await authApi.login(email, password, rememberMe, captcha)\r\n    if (response.data.resultCode === 0) {\r\n      dispatch(getAuthUserData())\r\n    } else if (response.data.resultCode === 10) {\r\n      dispatch(getCaptchaURL())\r\n    } else {\r\n      let message = response.data.messages.length > 0 ? response.data.messages : 'Some error';\r\n      let action = stopSubmit('login', {_error: message});\r\n      dispatch(action)\r\n    }\r\n    dispatch(toggleIsFetching(false));\r\n  }\r\n}\r\n\r\nexport const logout = (): AppThunk => {\r\n  return async (dispatch) => {\r\n    dispatch(toggleIsFetching(true));\r\n    let response = await authApi.logout()\r\n    if (response.data.resultCode === 0) {\r\n      dispatch(toggleIsFetching(false));\r\n      dispatch(setAuthUsersData(null, null, null, false))\r\n    }\r\n  }\r\n}\r\n\r\nexport const getCaptchaURL = (): AppThunk => {\r\n  return async (dispatch) => {\r\n    const response = await securityApi.getCaptcha()\r\n    const captchaURL = response.data.url;\r\n    dispatch(getCaptchaURLSuccess(captchaURL))\r\n  }\r\n}","import React from 'react';\r\nimport {Header} from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout, setAuthUsersData, toggleIsFetching} from \"../../redux/auth_reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose} from 'redux';\r\n\r\nexport type MapStatePropsType = {\r\n    login: string | null\r\n    isAuth: boolean\r\n    isFetching: boolean\r\n};\r\ntype MapDispatchToPropsType = {\r\n    setAuthUsersData: (userId: number, login: string, email: string) => void\r\n    toggleIsFetching: (isFetching: boolean) => void\r\n    logout: () => void\r\n}\r\nexport type HeaderContainerPropsType = MapStatePropsType & MapDispatchToPropsType;\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerPropsType> {\r\n\r\n    render() {\r\n        return <Header {...this.props}/>;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login,\r\n        isFetching: state.auth.isFetching,\r\n    };\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        setAuthUsersData,\r\n        toggleIsFetching,\r\n        logout\r\n    }),\r\n)(HeaderContainer);\r\n","// Actions\r\nimport {AppThunk} from \"./redux-store\";\r\nimport {getAuthUserData, toggleIsFetching} from \"./auth_reducer\";\r\n\r\nconst SET_INITIALIZED = 'social-network-ts/app_reducer/SET_INITIALIZED'\r\n\r\n//Types\r\nexport type ActionsTypesAPP = ReturnType<typeof setInitialized>;\r\ntype AppStateType = typeof initialState;\r\n\r\n//Initial State\r\nconst initialState = {\r\n    initialized: false\r\n};\r\n\r\n// Reducer\r\nexport const appReducer = (state: AppStateType = initialState, action: ActionsTypesAPP): AppStateType => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED:\r\n            return {\r\n                ...state,\r\n                initialized: action.value\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// Action Creators\r\nexport const setInitialized = (value: boolean) => {\r\n    return {type: SET_INITIALIZED, value} as const\r\n}\r\n\r\n// ThunkCreator\r\nexport const initializeApp = (): AppThunk => {\r\n    return (dispatch) => {\r\n        dispatch(toggleIsFetching(true));\r\n        let promise = dispatch(getAuthUserData());\r\n        Promise.all([promise])\r\n            .then( () => {\r\n                dispatch(setInitialized(true))\r\n                dispatch(toggleIsFetching(false));\r\n            })\r\n    }\r\n}","import {AppDispatch, AppStateType} from \"./redux-store\";\r\nimport {profileApi} from \"../api/api\";\r\nimport {ProfileFormDataType} from \"../components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm\";\r\nimport {toggleIsFetching} from \"./auth_reducer\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\n// Actions\r\nconst ADD_POST = 'social-network-ts/profile_reducer/ADD_POST';\r\nconst SET_USER_PROFILE = 'social-network-ts/profile_reducer/SET_USER_PROFILE';\r\nconst SET_PROFILE_STATUS = 'social-network-ts/profile_reducer/SET_PROFILE_STATUS';\r\nconst UPDATE_PROFILE_STATUS = 'social-network-ts/profile_reducer/UPDATE_PROFILE_STATUS';\r\nconst SAVE_PHOTO_SUCCESS = 'social-network-ts/profile_reducer/SAVE_PHOTO_SUCCESS';\r\n\r\n//Types\r\nexport type PostType = {\r\n  id: number,\r\n  message: string,\r\n  likesCount: number\r\n}\r\ntype PhotoType = {\r\n  small: string\r\n  large: string\r\n}\r\nexport type ContactsType = {\r\n  facebook: string\r\n  website: string\r\n  vk: string\r\n  twitter: string\r\n  instagram: string\r\n  youtube: string\r\n  github: string\r\n  mainLink: string\r\n}\r\nexport type ProfileUserType = {\r\n  aboutMe: string\r\n  contacts: ContactsType,\r\n  lookingForAJob: boolean\r\n  lookingForAJobDescription: string\r\n  fullName: string\r\n  userId: number\r\n  photos: PhotoType\r\n}\r\nexport type ProfilePageType = {\r\n  posts: Array<PostType>\r\n  newPostText: string\r\n  profileUser: ProfileUserType | null\r\n  profileStatus: string\r\n}\r\nexport type addPostAT = ReturnType<typeof addPost>\r\nexport type setUsersProfileAT = ReturnType<typeof setUsersProfile>\r\nexport type setProfileStatusAT = ReturnType<typeof setProfileStatus>\r\nexport type updateProfileStatusAT = ReturnType<typeof updateProfileStatus>\r\nexport type savePhotoSuccessAT = ReturnType<typeof savePhotoSuccess>\r\nexport type ActionsTypesPR = addPostAT\r\n    | setUsersProfileAT\r\n    | updateProfileStatusAT\r\n    | savePhotoSuccessAT\r\n    | setProfileStatusAT;\r\n\r\n//Initial State\r\nconst initialState: ProfilePageType = {\r\n  posts: [\r\n    {\r\n      id: 1,\r\n      message: 'Перебираемые (или итерируемые) объекты – это...',\r\n      likesCount: 9\r\n    },\r\n    {\r\n      id: 2,\r\n      message: 'Конечно же, сами массивы являются перебираемыми...',\r\n      likesCount: 19\r\n    },\r\n    {\r\n      id: 3,\r\n      message: 'Если объект не является массивом, но представляет...',\r\n      likesCount: 3\r\n    },\r\n  ] as Array<PostType>,\r\n  newPostText: '' as string,\r\n  profileUser: null as null | ProfileUserType,\r\n  profileStatus: '',\r\n};\r\n\r\n// Reducer\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: ActionsTypesPR): ProfilePageType => {\r\n  switch (action.type) {\r\n    case ADD_POST:\r\n      const newPost: PostType = {\r\n        id: new Date().getTime(),\r\n        message: action.newPostMessage,\r\n        likesCount: 19\r\n      }\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts, newPost],\r\n      };\r\n    case SET_USER_PROFILE:\r\n      return {\r\n        ...state,\r\n        profileUser: action.profileUser\r\n      }\r\n    case SET_PROFILE_STATUS:\r\n      return {\r\n        ...state,\r\n        profileStatus: action.profileStatus,\r\n      }\r\n    case UPDATE_PROFILE_STATUS:\r\n      return {\r\n        ...state,\r\n        profileStatus: action.newStatus,\r\n      }\r\n    case SAVE_PHOTO_SUCCESS:\r\n      return {\r\n        ...state,\r\n        profileUser: {\r\n          ...state.profileUser,\r\n          photos: action.photo\r\n        } as ProfileUserType\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// Action Creators\r\nexport const addPost = (newPostMessage: string) => {\r\n  return {type: ADD_POST, newPostMessage} as const\r\n}\r\nexport const setUsersProfile = (profileUser: ProfileUserType) => {\r\n  return {\r\n    type: SET_USER_PROFILE,\r\n    profileUser,\r\n  } as const\r\n}\r\nexport const setProfileStatus = (profileStatus: string) => {\r\n  return {\r\n    type: SET_PROFILE_STATUS,\r\n    profileStatus,\r\n  } as const\r\n}\r\nexport const updateProfileStatus = (newStatus: string) => {\r\n  return {\r\n    type: UPDATE_PROFILE_STATUS,\r\n    newStatus,\r\n  } as const\r\n}\r\nexport const savePhotoSuccess = (photo: PhotoType) => {\r\n  return {\r\n    type: SAVE_PHOTO_SUCCESS,\r\n    photo,\r\n  } as const\r\n}\r\n\r\n// ThunkCreator\r\nexport const getUserProfile = (userID: number) => {\r\n  return async (dispatch: AppDispatch) => {\r\n    let response = await profileApi.getProfile(userID)\r\n    dispatch(setUsersProfile(response.data));\r\n  }\r\n}\r\nexport const getStatus = (userID: number) => {\r\n  return async (dispatch: AppDispatch) => {\r\n    let response = await profileApi.getStatus(userID)\r\n    dispatch(setProfileStatus(response.data));\r\n  }\r\n}\r\nexport const updateStatus = (newStatus: string) => {\r\n  return async (dispatch: AppDispatch) => {\r\n    try {\r\n      let response = await profileApi.updateStatus(newStatus)\r\n      if (response.data.resultCode === 0) {\r\n        dispatch(setProfileStatus(response.data.status));\r\n      }\r\n    } catch (e) {\r\n      alert(e)\r\n    }\r\n  }\r\n}\r\nexport const savePhoto = (file: File) => {\r\n  return async (dispatch: AppDispatch) => {\r\n    try {\r\n      let response = await profileApi.savePhoto(file)\r\n      if (response.data.resultCode === 0) {\r\n        dispatch(savePhotoSuccess(response.data.data.photos));\r\n      }\r\n    } catch (e) {\r\n      throw new Error(e)\r\n    }\r\n  }\r\n}\r\nexport const saveProfile = (formData: ProfileFormDataType) => {\r\n  return async (dispatch: AppDispatch, getState: () => AppStateType) => {\r\n    const userID = getState().auth.userId;\r\n    dispatch(toggleIsFetching(true));\r\n    const response = await profileApi.saveProfile(formData)\r\n    if (response.data.resultCode === 0) {\r\n      if (userID) {\r\n        // @ts-ignore\r\n        dispatch(getUserProfile(userID));\r\n      } else {\r\n        // @ts-ignore\r\n        dispatch(stopSubmit('edit_profile', {\r\n          _error: response.data.messages[0]\r\n        }))\r\n        return Promise.reject(response.data.messages[0])\r\n      }\r\n    }\r\n    dispatch(toggleIsFetching(false));\r\n  }\r\n}\r\n\r\n","export const updateObjectInArray = (items: any[], itemID: number, objPropName: string, newObjProps: any) => {\r\n    return items.map(el => el[objPropName] === itemID\r\n        ? {...el, ...newObjProps}\r\n        : el)\r\n}","import {AppThunk} from \"./redux-store\";\r\nimport {usersApi} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {updateObjectInArray} from \"../utils/objects-helpers/objects-helpers\";\r\n\r\n// Actions\r\n// enum Users {\r\n//     FOLLOW = 'social-network-ts/users_reducer/FOLLOW',\r\n//     UNFOLLOW = 'social-network-ts/users_reducer/UNFOLLOW',\r\n//     SET_USERS = 'social-network-ts/users_reducer/SET_USERS',\r\n//     SET_CURRENT_PAGE = 'social-network-ts/users_reducer/SET_CURRENT_PAGE',\r\n//     SET_TOTAL_USERS_COUNT = 'social-network-ts/users_reducer/SET_TOTAL_USERS_COUNT',\r\n//     TOGGLE_IS_FETCHING = 'social-network-ts/users_reducer/TOGGLE_IS_FETCHING',\r\n//     TOGGLE_IS_FOLLOWING_PROGRESS = 'social-network-ts/users_reducer/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n// }\r\n\r\nconst FOLLOW = 'social-network-ts/users_reducer/FOLLOW';\r\nconst UNFOLLOW = 'social-network-ts/users_reducer/UNFOLLOW';\r\nconst SET_USERS = 'social-network-ts/users_reducer/SET_USERS';\r\nconst SET_CURRENT_PAGE = 'social-network-ts/users_reducer/SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'social-network-ts/users_reducer/SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'social-network-ts/users_reducer/TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'social-network-ts/users_reducer/TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\n//Types\r\nexport type UserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: string\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    status: string\r\n    followed: boolean\r\n}\r\nexport type UsersPageType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUserCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\nexport type FollowAT = ReturnType<typeof followUser>\r\nexport type UnFollowAT = ReturnType<typeof unFollowUser>\r\nexport type SetUsersAT = ReturnType<typeof setUsers>\r\nexport type SetCurrentPageAT = ReturnType<typeof setCurrentPage>\r\nexport type SetTotalUsersCountAT = ReturnType<typeof setTotalUsersCount>\r\nexport type ToggleIsFetchingAT = ReturnType<typeof toggleIsFetching>\r\nexport type ToggleFollowingProgressAT = ReturnType<typeof toggleFollowingProgress>\r\nexport type UsersActionTypes =\r\n    | FollowAT\r\n    | UnFollowAT\r\n    | SetUsersAT\r\n    | SetCurrentPageAT\r\n    | SetTotalUsersCountAT\r\n    | ToggleFollowingProgressAT\r\n    | ToggleIsFetchingAT;\r\n\r\n//Initial State\r\nconst initialState: UsersPageType = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 5,\r\n    totalUserCount: 100,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [],\r\n};\r\n\r\n// Reducer\r\nexport const usersReducer = (state: UsersPageType = initialState, action: UsersActionTypes): UsersPageType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                // users: state.users.map(el => el.id === action.userID\r\n                //     ? {...el, followed: true}\r\n                //     : el)\r\n                users: updateObjectInArray(state.users, action.userID, 'id', {followed: true})\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                // users: state.users.map(el => el.id === action.userID\r\n                //     ? {...el, followed: false}\r\n                //     : el)\r\n                users: updateObjectInArray(state.users, action.userID, 'id', {followed: false})\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            }\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.page,\r\n            }\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {\r\n                ...state,\r\n                totalUserCount: action.totalCount,\r\n            }\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching,\r\n            }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.progress\r\n                    ? [...state.followingInProgress, action.userID]\r\n                    : state.followingInProgress.filter(id => id !== action.userID)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// Action Creators\r\nexport const followUser = (userID: number) => ({type: FOLLOW, userID} as const)\r\nexport const unFollowUser = (userID: number) => ({type: UNFOLLOW, userID} as const)\r\nexport const setUsers = (users: Array<UserType>) => ({type: SET_USERS, users} as const)\r\nexport const setCurrentPage = (page: number) => ({type: SET_CURRENT_PAGE, page} as const)\r\nexport const setTotalUsersCount = (totalCount: number) => ({type: SET_TOTAL_USERS_COUNT, totalCount} as const)\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const)\r\nexport const toggleFollowingProgress = (progress: boolean, userID: number) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    progress,\r\n    userID,\r\n} as const)\r\n\r\n// ThunkCreator\r\nexport const getResponseUsers = (currentPage: number): AppThunk => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetching(true));\r\n        dispatch(setCurrentPage(currentPage));\r\n        let data = await usersApi.getUsers(currentPage)\r\n        dispatch(toggleIsFetching(false));\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount));\r\n    }\r\n}\r\n\r\nconst followUnFollowFlow = async (dispatch: Dispatch, userID: number, apiMethod: any, actionCreator: any) => {\r\n    dispatch(toggleFollowingProgress(true, userID));\r\n    let data = await apiMethod(userID);\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(userID))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userID));\r\n};\r\n\r\nexport const follow = (userID: number): AppThunk => {\r\n    // return async (dispatch) => {\r\n    //     dispatch(toggleFollowingProgress(true, userID));\r\n    //     let data = await usersApi.follow(userID)\r\n    //     if (data.resultCode === 0) {\r\n    //         dispatch(followUser(userID))\r\n    //     }\r\n    //     dispatch(toggleFollowingProgress(false, userID));\r\n    // }\r\n    return async (dispatch) => {\r\n        await followUnFollowFlow(dispatch, userID, usersApi.follow, followUser);\r\n    }\r\n}\r\n\r\nexport const unFollow = (userID: number): AppThunk => {\r\n    // return async (dispatch) => {\r\n    //     dispatch(toggleFollowingProgress(true, userID));\r\n    //     let data = await usersApi.unFollow(userID)\r\n    //     if (data.resultCode === 0) {\r\n    //         dispatch(unFollowUser(userID))\r\n    //     }\r\n    //     dispatch(toggleFollowingProgress(false, userID));\r\n    // }\r\n    return async (dispatch) => {\r\n        await followUnFollowFlow(dispatch, userID, usersApi.unFollow, unFollowUser);\r\n    }\r\n}","// Actions\r\nconst ADD_MESSAGE = 'social-network-ts/dialogs_reducer/ADD_MESSAGE';\r\n\r\n//Types\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type DialogPageType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    newMessageText: string\r\n}\r\n\r\nexport type ActionsTypesDR = ReturnType<typeof addMessage>\r\n\r\n//Initial State\r\nlet initialState: DialogPageType = {\r\n    dialogs: [\r\n        {id: 1, name: 'Nikita'},\r\n        {id: 2, name: 'Masha'},\r\n        {id: 3, name: 'Sasha'},\r\n        {id: 4, name: 'Kirill'},\r\n        {id: 5, name: 'Vasil'},\r\n        {id: 6, name: 'Jon'},\r\n    ] as Array<DialogType>,\r\n    messages: [\r\n        {id: 1, message: 'Hi! how are you?'},\r\n        {id: 2, message: 'Hi! How old are you?'},\r\n        {id: 3, message: 'Hi! Where are you from?'},\r\n        {id: 4, message: 'Hello! I don\\'t need books'},\r\n        {id: 5, message: 'How do you do?'},\r\n        {id: 6, message: 'I\\'m fine'},\r\n    ] as Array<MessageType>,\r\n    newMessageText: '' as string\r\n};\r\n\r\n// Reducer\r\nexport const dialogsReducer = (state: DialogPageType = initialState, action: ActionsTypesDR): DialogPageType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            const newMessagePost: MessageType = {\r\n                id: new Date().getTime(),\r\n                message: action.newMessageBody\r\n            }\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newMessagePost],\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// Action Creators\r\nexport const addMessage = (newMessageBody: string) => ({type: ADD_MESSAGE, newMessageBody}) as const","import {ActionsTypesDR} from \"./dialogs_reducer\"; // Refactoring\r\n\r\n//Types\r\nexport type SideBarType = {}\r\n\r\n//Initial State\r\nlet initialState: SideBarType = {};\r\n\r\n// Reducer\r\nexport const sideBarReducer = (state: SideBarType = initialState, action: ActionsTypesDR): SideBarType => {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n    }\r\n}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {ActionsTypesPR, profileReducer} from \"./profile_reducer\";\r\nimport {UsersActionTypes, usersReducer} from \"./users_reducer\";\r\nimport {AuthActionTypes, authReducer} from \"./auth_reducer\";\r\nimport {ActionsTypesDR, dialogsReducer} from \"./dialogs_reducer\";\r\nimport {sideBarReducer} from \"./sideBar_reducer\";\r\nimport thunkMiddleWare, {ThunkAction} from 'redux-thunk';\r\nimport {FormAction, reducer as formReducer} from 'redux-form';\r\nimport {ActionsTypesAPP, appReducer} from \"./app_reducer\";\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type AppActionType =\r\n    | ActionsTypesPR\r\n    | ActionsTypesDR\r\n    | UsersActionTypes\r\n    | AuthActionTypes\r\n    | FormAction\r\n    | ActionsTypesAPP\r\n// export type StoreType = typeof store;\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppStateType, unknown, AppActionType>\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    sideBar: sideBarReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(\r\n    applyMiddleware(thunkMiddleWare)\r\n));\r\n\r\n// const store = createStore(rootReducer, applyMiddleware(thunkMiddleWare));\r\n\r\nexport default store;\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store;\r\n","import React from \"react\";\r\nimport {Field, WrappedFieldProps} from \"redux-form\";\r\nimport s from './FormsControls.module.css'\r\nimport {ValidatorType} from \"../../utils/validators/validators\";\r\n\r\nexport const FormControl: React.FC<any> = ({meta: {error, touched}, children}) => {\r\n\r\n    const hasError = error && touched;\r\n\r\n    return (\r\n        <div className={`${s.formControl} ${hasError ? s.error : ''}`}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}>\r\n        <textarea {...input} {...restProps}/>\r\n    </FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}>\r\n        <input {...input} {...restProps}/>\r\n    </FormControl>\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(\r\n    name: FormKeysType,\r\n    placeholder: string | undefined,\r\n    component: string | React.Component | React.FC<WrappedFieldProps>,\r\n    validate: ValidatorType[],\r\n    props = {},\r\n    className = '',\r\n    text = '',\r\n    id = ''\r\n) {\r\n    return (\r\n        <div>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                validate={validate}\r\n                component={component}\r\n                {...props}\r\n                id={id}\r\n                className={className}\r\n            />\r\n            {text}\r\n        </div>\r\n    )\r\n}\r\n\r\n","export type ValidatorType = (value: string | undefined) => string | undefined\r\n\r\nexport const required = (value: string) => value ? undefined : \"Field is required\";\r\n\r\nexport const maxLengthCreator = (maxLength: string) => (value: string) => {\r\n    return (+value.length > +maxLength) ? `Max length is ${maxLength} symbols` : undefined;\r\n}","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {login} from \"../../redux/auth_reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport s from '../../common/FormsControls/FormsControls.module.css'\r\nimport l from '../../components/Login/Login.module.css'\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\n\r\ntype LoginPropsType = {\r\n  captchaURL: string | null\r\n}\r\n\r\nexport type LoginFormDataType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n  captcha: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormDataType, LoginPropsType> & LoginPropsType>\r\n    = (({\r\n          handleSubmit,\r\n          error,\r\n          captchaURL,\r\n        }) => {\r\n  return (\r\n      <form onSubmit={handleSubmit}>\r\n\r\n        <Field\r\n            validate={[required]}\r\n            component={Input}\r\n            name='email'\r\n            placeholder='email'/>\r\n        <Field\r\n            validate={[required]}\r\n            component={Input}\r\n            name='password'\r\n            placeholder='password'\r\n            type={'password'}/>\r\n        <Field\r\n            component={Input}\r\n            name='rememberMe'\r\n            type='checkbox'/> <span>remember me</span>\r\n\r\n        <div>\r\n          {captchaURL && <img src={captchaURL} alt={captchaURL}/>}\r\n        </div>\r\n\r\n        {captchaURL && createField('captcha', 'Symbols from image', Input, [])}\r\n\r\n        <div>\r\n          <button>Login</button>\r\n        </div>\r\n\r\n        {error && <span className={s.formSummaryError}>\r\n                {error}\r\n            </span>}\r\n      </form>\r\n  )\r\n})\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormDataType, LoginPropsType>({form: 'loginForm'})(LoginForm)\r\n\r\nexport const LoginPage: React.FC = () => {\r\n\r\n  const captchaURL = useSelector((state: AppStateType) => state.auth.captchaURL)\r\n  const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n  const isFetching = useSelector((state: AppStateType) => state.auth.isFetching)\r\n  const dispatch = useDispatch()\r\n\r\n  const onSubmit = (formData: LoginFormDataType) => {\r\n    dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\r\n  }\r\n\r\n  if (isAuth) return <Redirect to={`/profile/5513`}/>\r\n  if (isFetching) return <Preloader/>\r\n\r\n  return (\r\n      <div className={l.wrapper}>\r\n        <div>\r\n          <span>You can register -\r\n            <a href={'https://social-network.samuraijs.com/'}\r\n               rel={'noreferrer'}\r\n               target={'_blank'}>here\r\n            </a>\r\n          </span>\r\n          <div>or use test account:</div>\r\n          <div>Email: free@samuraijs.com</div>\r\n          <div>Password: free</div>\r\n        </div>\r\n\r\n        <h1>Please, login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaURL={captchaURL}/>\r\n      </div>\r\n  )\r\n}","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport const Post: React.FC<PostPropsType> = (props) => {\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src='https://mpng.subpng.com/20180523/tha/kisspng-businessperson-computer-icons-avatar-clip-art-lattice-5b0508dc6a3a10.0013931115270566044351.jpg'\r\n                alt='avatar'/>\r\n            <div>{props.message}</div>\r\n            <div>\r\n                <span>&#9825; - {props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport {Post} from \"./Post/Post\";\r\nimport {MyPostPropsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../../common/FormsControls/FormsControls\";\r\n\r\ntype AddMessageFormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nexport const MyPosts: React.FC<MyPostPropsType> = React.memo((props) => {\r\n\r\n    let postsElements = props.profilePage.posts.map(el => {\r\n            return (\r\n                <Post\r\n                    key={el.id}\r\n                    message={el.message}\r\n                    likesCount={el.likesCount}/>\r\n            )\r\n        }\r\n    );\r\n\r\n    const onAddPost = (values: AddMessageFormDataType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.myPosts}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <AddNewPostReduxForm onSubmit={onAddPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst maxLength10 = maxLengthCreator('10');\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddMessageFormDataType>> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field\r\n                component={Textarea}\r\n                name='newPostText'\r\n                placeholder='Enter your post'\r\n                validate={[required, maxLength10]}\r\n            />\r\n        </div>\r\n        <div>\r\n            <button>Add post</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<AddMessageFormDataType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm);","import {addPost, ProfilePageType} from \"../../../redux/profile_reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapStateToPropsType = {\r\n    profilePage: ProfilePageType\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newPostMessage: string) => void\r\n}\r\n\r\nexport type MyPostPropsType = MapStateToPropsType & MapDispatchToPropsType;\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostMessage: string) => {\r\n            dispatch(addPost(newPostMessage))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from './ProfileStatus.module.css';\r\n\r\ntype ProfileStatusType = {\r\n    profileStatus: string\r\n    updateStatus: (newStatus: string) => void\r\n    isOwner: boolean\r\n}\r\n\r\nexport const ProfileStatusWithHooks = ({profileStatus, updateStatus, isOwner}: ProfileStatusType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(profileStatus);\r\n\r\n    useEffect(() => {\r\n        setStatus(profileStatus)\r\n    }, [profileStatus])\r\n\r\n    const activateEditModeHandler = () => {\r\n        if (isOwner) setEditMode(true);\r\n    }\r\n\r\n    const deActivateEditModeHandler = () => {\r\n        updateStatus(status);\r\n        setEditMode(false);\r\n    }\r\n\r\n    const changeProfileStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return <div className={s.wrapperStatus}>\r\n        {editMode\r\n            ? <div>\r\n                <input\r\n                    value={status}\r\n                    type=\"text\"\r\n                    autoFocus\r\n                    onBlur={deActivateEditModeHandler}\r\n                    placeholder='print your status'\r\n                    onChange={changeProfileStatusHandler}\r\n                />\r\n            </div>\r\n            : <div>\r\n                 <span onDoubleClick={activateEditModeHandler}>\r\n                     <b>Status: </b> {status || 'the user didn\\'t write a status...'}\r\n                 </span>\r\n            </div>\r\n        }\r\n    </div>\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport p from './ProfileStatus.module.css'\r\n\r\ntype ContactPropsType = {\r\n  contactTitle: string\r\n  contactValue: string | undefined\r\n}\r\n\r\nexport const Contacts: React.FC<ContactPropsType> = (\r\n    {\r\n      contactTitle,\r\n      contactValue\r\n    }) => {\r\n  return (\r\n      <div className={p.wrapper}>\r\n        <span><i>{contactTitle}</i>:\r\n                <a href={contactValue}\r\n                   rel={'noreferrer'}\r\n                   target={'_blank'}\r\n                   title={'contact ref'}>\r\n                  {contactValue}\r\n                </a>\r\n            </span>\r\n      </div>\r\n  )\r\n}","import React from \"react\";\r\nimport {ContactsType, ProfileUserType} from \"../../../../redux/profile_reducer\";\r\nimport {Contacts} from \"../ProfileContacts/ProfileContacts\";\r\nimport s from \"../ProfileInfo.module.css\";\r\n\r\ntype ProfileDataPropsType = {\r\n  profileUser: ProfileUserType\r\n}\r\n\r\nexport const ProfileData = (props: ProfileDataPropsType) => {\r\n  return <div>\r\n    <div>\r\n      <span className={s.titleText}>Full Name: </span>\r\n      {props.profileUser.fullName}\r\n    </div>\r\n    <div>\r\n      <span className={s.titleText}>About Me: </span>\r\n      {props.profileUser.aboutMe || '...'}\r\n    </div>\r\n    <div>\r\n      <span className={s.titleText}>Looking For A Job: </span>\r\n      {props.profileUser.lookingForAJob ? 'yes' : 'no'}\r\n    </div>\r\n    <div>\r\n      <span className={s.titleText}>My professional skills: </span>\r\n      {props.profileUser.lookingForAJobDescription || '...'}\r\n    </div>\r\n\r\n    <div>\r\n      <b>Contacts:</b>\r\n      {Object.keys(props.profileUser.contacts).map((key) =>\r\n          <Contacts contactTitle={key}\r\n                    key={key}\r\n                    contactValue={props.profileUser.contacts[key as keyof ContactsType]}/>)}\r\n    </div>\r\n  </div>\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport s from '../ProfileInfo.module.css';\r\nimport {\r\n  createField,\r\n  Input,\r\n  Textarea\r\n} from \"../../../../common/FormsControls/FormsControls\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport {ProfileUserType} from \"../../../../redux/profile_reducer\";\r\n\r\nexport type ProfileFormDataType = {\r\n  fullName: string\r\n  lookingForAJob: boolean\r\n  lookingForAJobDescription: string\r\n  aboutMe: string\r\n}\r\n\r\ntype ProfileDataFormPropsType = {\r\n  profileUser: ProfileUserType\r\n  savePhoto: (photo: File) => void\r\n  setEditProfile: (editProfile: boolean) => void\r\n}\r\n\r\nexport const ProfileDataForm = reduxForm<ProfileUserType, ProfileDataFormPropsType>(\r\n    {form: 'edit_profile'})((\r\n    {\r\n      profileUser,\r\n      setEditProfile,\r\n      error,\r\n      savePhoto,\r\n      handleSubmit\r\n    }\r\n) => {\r\n\r\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files?.length) {\r\n      savePhoto(e.target.files[0])\r\n    }\r\n  }\r\n\r\n  return (\r\n      <form onSubmit={handleSubmit}>\r\n        <label className={s.changeAvatar}>\r\n          <b>Change avatar:</b>\r\n          <div>\r\n            <input type=\"file\"\r\n                   placeholder={'Change avatar'}\r\n                   onChange={onMainPhotoSelected}/>\r\n          </div>\r\n        </label>\r\n\r\n        <div>\r\n          <span className={s.titleText}>About Me: </span>\r\n          {createField('aboutMe', 'About Me', Input, [])}\r\n        </div>\r\n\r\n        <div>\r\n          <span className={s.titleText}>Full Name: </span>\r\n          {createField('fullName', 'Full name', Input, [])}\r\n        </div>\r\n\r\n        <div>\r\n          <span className={s.titleText}>My professional skills: </span>\r\n          {createField('lookingForAJobDescription', 'My professional skills', Textarea, [])}\r\n        </div>\r\n\r\n        <div>\r\n          <span className={s.titleText}>Looking For A Job: </span>\r\n          {createField('lookingForAJob', '', Input, [], {type: 'checkbox'})}\r\n        </div>\r\n\r\n        <div>\r\n          <b>Contacts:</b>\r\n          {Object.keys(profileUser.contacts).map((key) => {\r\n                return (\r\n                    <div key={key}>\r\n                      <b>{key} : {createField('contacts.' + key, key, Input, [])}</b>\r\n                    </div>\r\n                )\r\n              }\r\n          )}\r\n        </div>\r\n\r\n        <button style={{backgroundColor: 'green'}} type={'submit'}>Save</button>\r\n        <button style={{backgroundColor: 'red'}} type={'button'}\r\n                onClick={() => setEditProfile(false)}> Cancel\r\n        </button>\r\n\r\n        {error && (\r\n            <span style={{color: 'red'}}>\r\n                {error}\r\n            </span>\r\n        )}\r\n      </form>\r\n  )\r\n})\r\n\r\n","export default __webpack_public_path__ + \"static/media/avatar.6acf9f91.png\";","import React, {useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {ProfileUserType} from \"../../../redux/profile_reducer\";\r\nimport {Preloader} from '../../../common/Preloader/Preloader';\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\nimport {ProfileData} from './ProfileData/ProfileData';\r\nimport {ProfileDataForm, ProfileFormDataType} from './ProfileDataForm/ProfileDataForm';\r\nimport avatarPhoto from \"../../../assets/images/avatar.png\";\r\n\r\nexport type ProfileInfoType = {\r\n  profileUser: ProfileUserType | null\r\n  profileStatus: string\r\n  isOwner: boolean\r\n  updateStatus: (newStatus: string) => void\r\n  savePhoto: (photo: File) => void\r\n  saveProfile: (formData: ProfileFormDataType) => void\r\n}\r\n\r\nexport const ProfileInfo = (props: ProfileInfoType) => {\r\n\r\n  const [editProfile, setEditProfile] = useState<boolean>(false)\r\n\r\n  if (!props.profileUser) {\r\n    return <Preloader/>\r\n  }\r\n\r\n  const activateEditModeHandler = () => {\r\n    if (props.isOwner) setEditProfile(true);\r\n  }\r\n\r\n  const onProfileFormSubmit = (formData: ProfileFormDataType) => {\r\n    props.saveProfile(formData)\r\n    setEditProfile(false);\r\n  }\r\n\r\n  return (\r\n      <div className={s.profileInfo}>\r\n        <div className={s.description}>\r\n          <img alt={'avatar'}\r\n               src={props.profileUser.photos.large || avatarPhoto}\r\n          />\r\n\r\n          <div>\r\n            <ProfileStatusWithHooks\r\n                isOwner={props.isOwner}\r\n                updateStatus={props.updateStatus}\r\n                profileStatus={props.profileStatus}\r\n            />\r\n\r\n            {props.isOwner && !editProfile && <button\r\n              onClick={activateEditModeHandler}>\r\n              Edit profile\r\n            </button>}\r\n\r\n            {editProfile\r\n                ? <ProfileDataForm\r\n                    onSubmit={onProfileFormSubmit}\r\n                    initialValues={props.profileUser}\r\n                    savePhoto={props.savePhoto}\r\n                    setEditProfile={setEditProfile}\r\n                    profileUser={props.profileUser}\r\n                />\r\n                : <ProfileData profileUser={props.profileUser}/>}\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n}","import React from 'react';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport s from './Profile.module.css';\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {ProfileUserType} from \"../../redux/profile_reducer\";\r\nimport {ProfileFormDataType} from \"./ProfileInfo/ProfileDataForm/ProfileDataForm\";\r\n\r\nexport type ProfileType = {\r\n  profileUser: ProfileUserType | null\r\n  profileStatus: string\r\n  updateStatus: (newStatus: string) => void\r\n  isOwner: boolean\r\n  savePhoto: (photo: File) => void\r\n  saveProfile: (formData: ProfileFormDataType) => void\r\n}\r\n\r\nexport const Profile = (props: ProfileType) => {\r\n  return (\r\n      <div className={s.AppContent}>\r\n        <ProfileInfo\r\n            saveProfile={props.saveProfile}\r\n            savePhoto={props.savePhoto}\r\n            isOwner={props.isOwner}\r\n            updateStatus={props.updateStatus}\r\n            profileStatus={props.profileStatus}\r\n            profileUser={props.profileUser}/>\r\n        <MyPostsContainer/>\r\n      </div>\r\n  );\r\n}\r\n\r\n","import React from 'react';\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nexport type MapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n};\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStateToPropsForRedirectType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    };\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: React.ComponentType<T>) {\r\n    class RedirectComponent extends React.Component<MapStateToPropsForRedirectType> {\r\n        render() {\r\n\r\n            const {isAuth, ...restProps} = this.props;\r\n\r\n            if (!isAuth) {\r\n                return <Redirect to='/login'/>\r\n            }\r\n            return <Component {...restProps as T}/>\r\n        }\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n}","import React from 'react';\r\nimport {Profile} from \"./Profile\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n  getStatus,\r\n  getUserProfile,\r\n  ProfileUserType,\r\n  savePhoto,\r\n  saveProfile,\r\n  updateStatus\r\n} from \"../../redux/profile_reducer\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileFormDataType} from \"./ProfileInfo/ProfileDataForm/ProfileDataForm\";\r\n\r\ntype PathParamsType = {\r\n  userID: string\r\n}\r\ntype MapStatePropsType = {\r\n  profileUser: ProfileUserType | null\r\n  profileStatus: string\r\n  authorizedUserID: number | null\r\n  isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n  getUserProfile: (userID: number) => void\r\n  getStatus: (userID: number) => void\r\n  updateStatus: (newStatus: string) => void\r\n  savePhoto: (photo: File) => void\r\n  saveProfile: (formData: ProfileFormDataType) => void\r\n}\r\nexport type ProfilePropsType = MapStatePropsType & MapDispatchToPropsType;\r\ntype OwnProfilePropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    profileUser: state.profilePage.profileUser,\r\n    profileStatus: state.profilePage.profileStatus,\r\n    authorizedUserID: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n  }\r\n}\r\n\r\nclass ProfileContainer extends React.Component<OwnProfilePropsType> {\r\n\r\n  refreshProfile() {\r\n    let userID = Number(this.props.match.params.userID);\r\n    if (!userID) {\r\n      userID = Number(this.props.authorizedUserID);\r\n      if (!userID) {\r\n        this.props.history.push('/login')\r\n      }\r\n    }\r\n    this.props.getUserProfile(userID);\r\n    this.props.getStatus(userID);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile()\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Readonly<OwnProfilePropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n    if (this.props.match.params.userID !== prevProps.match.params.userID) {\r\n      this.refreshProfile()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <Profile\r\n            {...this.props}\r\n            savePhoto={this.props.savePhoto}\r\n            isOwner={!this.props.match.params.userID}\r\n            profileUser={this.props.profileUser}\r\n            profileStatus={this.props.profileStatus}\r\n            updateStatus={this.props.updateStatus}\r\n            saveProfile={this.props.saveProfile}\r\n        />\r\n    )\r\n  }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n      getUserProfile,\r\n      getStatus,\r\n      updateStatus,\r\n      savePhoto,\r\n      saveProfile,\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect,\r\n)(ProfileContainer);\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport s from './DialogsItem.module.css'\r\n\r\nexport type DialogsItemType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nexport const DialogsItem = (props: DialogsItemType) => {\r\n    return (\r\n        <div className={`${s.dialog} ${s.active}`}>\r\n            <img\r\n                src='https://mpng.subpng.com/20180523/tha/kisspng-businessperson-computer-icons-avatar-clip-art-lattice-5b0508dc6a3a10.0013931115270566044351.jpg'\r\n                alt='avatar'/>\r\n            <NavLink to={`/dialogs/${props.id}`}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport s from './Message.module.css'\r\n\r\nexport type MessageType = {\r\n    message: string\r\n}\r\n\r\nexport const Message = (props: MessageType) => {\r\n\r\n    return <div className={s.message}>\r\n        <div>\r\n            {props.message}\r\n        </div>\r\n    </div>\r\n}","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport {DialogsItem} from \"./DialogItem/DialogsItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm, reset} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\ntype AddMessageFormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = ({dialogsPage, ...props}) => {\r\n\r\n    const dialogsElements = dialogsPage.dialogs.map(el =>\r\n        <DialogsItem\r\n            key={el.id}\r\n            name={el.name}\r\n            id={el.id}\r\n        />);\r\n    const messagesElements = dialogsPage.messages.map(el =>\r\n        <Message\r\n            message={el.message}\r\n            key={el.id}\r\n        />);\r\n\r\n    const addNewMessage = (values: AddMessageFormDataType) => {\r\n        props.addMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n            </div>\r\n            <AddDialogsMessageReduxForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst afterSubmit = (result: any, dispatch: any) =>\r\n    dispatch(reset('dialogsAddMessageForm'));\r\n\r\nconst maxLength50 = maxLengthCreator('50');\r\n\r\nconst AddDialogsMessageForm: React.FC<InjectedFormProps<AddMessageFormDataType>> = (props) => {\r\n\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field\r\n                component={Textarea}\r\n                name='newMessageBody'\r\n                placeholder='Enter your message'\r\n                validate={[required, maxLength50]}\r\n            />\r\n        </div>\r\n        <div>\r\n            <button>Add message</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst AddDialogsMessageReduxForm = reduxForm<AddMessageFormDataType>({form: 'dialogsAddMessageForm', onSubmitSuccess: afterSubmit,})(AddDialogsMessageForm);","import {addMessage, DialogPageType} from \"../../redux/dialogs_reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport React from \"react\";\r\nimport {Dialogs} from \"./Dialogs\";\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: DialogPageType\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addMessage: (newMessageBody: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchToPropsType;\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addMessage: (newMessageBody: string) => {\r\n            dispatch(addMessage(newMessageBody))\r\n        },\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n\r\n","import {AppStateType} from \"./redux-store\";\r\nimport {createSelector} from \"reselect\";\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n};\r\nexport const getUsers = createSelector(getUsersSelector,\r\n    (users) => {\r\n        return users;\r\n    });\r\n\r\nexport const getPageSelector = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getPageSize = createSelector(getPageSelector, (pageSize) => {\r\n    return pageSize;\r\n});\r\n\r\nexport const getCurrentPageSelector = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getCurrentPage = createSelector(getCurrentPageSelector, (currentPage) => {\r\n    return currentPage\r\n});\r\n\r\nexport const getTotalUserCountSelector = (state: AppStateType) => {\r\n    return state.usersPage.totalUserCount\r\n}\r\nexport const getTotalUserCount = createSelector(getTotalUserCountSelector, (totalUserCount) => {\r\n    return totalUserCount;\r\n})\r\n\r\nexport const getIsFetchingSelector = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getIsFetching = createSelector(getIsFetchingSelector, (isFetching) => {\r\n    return isFetching;\r\n});\r\n\r\nexport const getFollowingInProgressSelector = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\nexport const getFollowingInProgress = createSelector(getFollowingInProgressSelector, (followingInProgress) => {\r\n    return followingInProgress;\r\n})\r\n\r\n","import s from \"../Paginator/Paginator.module.css\";\r\nimport React, {useState} from \"react\";\r\nimport classnames from 'classnames';\r\n\r\ntype PaginatorPropsType = {\r\n  onPageChanged: (pageNumber: number) => void\r\n  currentPage: number\r\n  totalItemCount: number\r\n  pageSize: number\r\n  portionSize: number\r\n}\r\n\r\nexport const Paginator: React.FC<PaginatorPropsType> = (\r\n    {\r\n      onPageChanged,\r\n      currentPage,\r\n      totalItemCount,\r\n      pageSize,\r\n      portionSize = 10\r\n    }: PaginatorPropsType) => {\r\n\r\n  const pagesCount = Math.ceil(totalItemCount / pageSize);\r\n  const portionCount = Math.ceil(pagesCount / portionSize);\r\n  const [portionNumber, setPortionNumber] = useState(1);\r\n  const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n  const rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n  const pages = [];\r\n  for (let i = 1; i <= pagesCount; i++) {\r\n    pages.push(i)\r\n  }\r\n\r\n  return (\r\n      <div className={s.paginator}>\r\n        {portionNumber > 1 &&\r\n        <button onClick={() => {\r\n          setPortionNumber(portionNumber - 1)\r\n        }}>PREV</button>}\r\n        {\r\n          pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n              .map((el, index) => {\r\n                const setCurrentPageHandler = () => onPageChanged(el);\r\n                return (\r\n                    <span\r\n                        onClick={setCurrentPageHandler}\r\n                        // className={`${el === currentPage\r\n                        //     ? s.selectedPage\r\n                        //     : s.page} ${s.page}`}\r\n                        className={classnames({\r\n                          [s.selectedPage]: el === currentPage\r\n                        }, s.page)}\r\n                        key={index}>\r\n                                {el}\r\n                            </span>\r\n                )\r\n              })\r\n        }\r\n        {portionCount > portionNumber &&\r\n        <button onClick={() => {\r\n          setPortionNumber(portionNumber + 1)\r\n        }}>NEXT</button>}\r\n      </div>\r\n  )\r\n}","import React from 'react';\r\nimport s from \"./User.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport avatarPhoto from \"../../../assets/images/avatar.png\";\r\nimport {UserType} from \"../../../redux/users_reducer\";\r\n\r\ntype UserPropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    unFollow: (userID: number) => void\r\n    follow: (userID: number) => void\r\n}\r\nexport const User: React.FC<UserPropsType> = (\r\n    {\r\n        user,\r\n        followingInProgress,\r\n        unFollow,\r\n        follow\r\n    }\r\n) => {\r\n\r\n    return (\r\n        <div>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={\"/profile/\" + user.id}>\r\n                            <img\r\n                                className={s.photo}\r\n                                src={user.photos.small !== null\r\n                                    ? user.photos.small\r\n                                    : avatarPhoto}\r\n                                alt=\"avatar\"\r\n                            />\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                            {user.followed\r\n                                ? <button\r\n                                    disabled={followingInProgress\r\n                                        .some(id => id === user.id)}\r\n                                    className={s.unFollow}\r\n                                    onClick={() => {\r\n                                        unFollow(user.id)\r\n                                    }}\r\n                                >UnFollow</button>\r\n                                : <button\r\n                                    disabled={followingInProgress\r\n                                        .some(id => id === user.id)}\r\n                                    className={s.follow}\r\n                                    onClick={() => {\r\n                                        follow(user.id)\r\n                                    }}\r\n                                >Follow</button>}\r\n                    </div>\r\n                </span>\r\n            <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n            <span>\r\n                        <div>el.location.country</div>\r\n                        <div>el.location.city</div>\r\n                    </span>\r\n        </div>)\r\n}","import React from 'react';\r\nimport s from \"./Users.module.css\";\r\nimport {UserType} from \"../../redux/users_reducer\";\r\nimport {Paginator} from \"../../common/Paginator/Paginator\";\r\nimport {User} from './User/User';\r\n\r\ntype UsersPresentType = {\r\n    totalUserCount: number\r\n    pageSize: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    currentPage: number\r\n    users: Array<UserType>\r\n    followUser: (userID: number) => void\r\n    unFollowUser: (userID: number) => void\r\n    followingInProgress: Array<number>\r\n    unFollow: (userID: number) => void\r\n    follow: (userID: number) => void\r\n}\r\nexport const Users: React.FC<UsersPresentType> = (\r\n    {\r\n        currentPage,\r\n        onPageChanged,\r\n        users,\r\n        followingInProgress,\r\n        follow,\r\n        unFollow,\r\n        totalUserCount,\r\n        pageSize\r\n    }\r\n) => {\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <Paginator\r\n                portionSize={15}\r\n                totalItemCount={totalUserCount}\r\n                pageSize={pageSize}\r\n                currentPage={currentPage}\r\n                onPageChanged={onPageChanged}/>\r\n\r\n            {\r\n                users.map((el, i) => <User\r\n                    key={i}\r\n                    followingInProgress={followingInProgress}\r\n                    unFollow={unFollow}\r\n                    follow={follow}\r\n                    user={el}/>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}","import {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    follow, followUser, getResponseUsers,\r\n    setCurrentPage, toggleFollowingProgress,\r\n    unFollow, unFollowUser, UserType\r\n} from \"../../redux/users_reducer\";\r\nimport React from \"react\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {\r\n    getCurrentPage, getFollowingInProgress, getIsFetching,\r\n    getPageSize, getTotalUserCount, getUsers\r\n} from \"../../redux/users_selectors\";\r\nimport { Users } from \"./Users\";\r\n\r\ntype MapStatePropsType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUserCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\ntype MapDispatchToPropsType = {\r\n    followUser: (userID: number) => void\r\n    unFollowUser: (userID: number) => void\r\n    setCurrentPage: (page: number) => void\r\n    toggleFollowingProgress: (progress: boolean, userID: number) => void\r\n    getResponseUsers: (currentPage: number) => void\r\n    unFollow: (userID: number) => void\r\n    follow: (userID: number) => void\r\n}\r\nexport type UsersPropsType = MapStatePropsType & MapDispatchToPropsType;\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUserCount: getTotalUserCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n    }\r\n}\r\n\r\nclass UsersContainer extends React.Component<UsersPropsType> {\r\n    componentDidMount() {\r\n        this.props.getResponseUsers(this.props.currentPage);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.setCurrentPage(pageNumber);\r\n        this.props.getResponseUsers(pageNumber);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching && <Preloader/>}\r\n            <Users\r\n                pageSize={this.props.pageSize}\r\n                totalUserCount={this.props.totalUserCount}\r\n                onPageChanged={this.onPageChanged}\r\n                currentPage={this.props.currentPage}\r\n                users={this.props.users}\r\n                followUser={this.props.followUser}\r\n                unFollowUser={this.props.unFollowUser}\r\n                followingInProgress={this.props.followingInProgress}\r\n                unFollow={this.props.unFollow}\r\n                follow={this.props.follow}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, {\r\n        followUser,\r\n        toggleFollowingProgress,\r\n        unFollowUser,\r\n        setCurrentPage,\r\n        getResponseUsers,\r\n        unFollow,\r\n        follow\r\n    }),\r\n)(UsersContainer);","import React from 'react';\r\nimport {HashRouter, Redirect, Route, Switch} from 'react-router-dom';\r\nimport s from '../src/App.module.css';\r\nimport {Navbar} from \"./components/Navbar/Navbar\";\r\nimport {News} from './components/News/News';\r\nimport {Music} from './components/Music/Music';\r\nimport {Settings} from './components/Settings/Settings';\r\nimport {FindFriends} from './components/FindFriends/FindFriends';\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport {compose} from \"redux\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {initializeApp} from \"./redux/app_reducer\";\r\nimport store, {AppStateType} from \"./redux/redux-store\";\r\n// import {Preloader} from \"./common/Preloader/Preloader\";\r\nimport {LoginPage} from './components/Login/Login';\r\nimport ProfileContainer from './components/Profile/ProfileContainer';\r\nimport DialogsContainer from './components/Dialogs/DialogsContainer';\r\nimport UsersContainer from './components/Users/UsersContainer';\r\n\r\n// const ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\n// const DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\n// const UsersContainer = React.lazy(() => import('./components/Users/UsersContainer'));\r\n\r\ntype MapDispatchToPropsType = { initializeApp: () => void };\r\nexport type MapStatePropsType = { initialized: boolean };\r\nexport type AppContainerPropsType = MapStatePropsType & MapDispatchToPropsType;\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {initialized: state.app.initialized};\r\n}\r\n\r\nclass App extends React.Component<AppContainerPropsType> {\r\n\r\n  componentDidMount() {\r\n    this.props.initializeApp();\r\n  }\r\n\r\n  render() {\r\n\r\n    // if (!this.props.initialized) return <Preloader/>\r\n\r\n    return (\r\n        // <Suspense fallback={<Preloader/>}>\r\n          <HashRouter>\r\n            <div className={s.AppWrapper}>\r\n              <HeaderContainer/>\r\n              <Navbar/>\r\n              <div className={s.AppContent}>\r\n                <Switch>\r\n                  <Route exact path={'/'} render={() => <Redirect to=\"/profile\"/>}/>\r\n                  <Route render={() => <ProfileContainer/>} path=\"/profile/:userID?\"/>\r\n                  <Route render={() => <DialogsContainer/>} exact path=\"/dialogs\"/>\r\n                  <Route render={() => <UsersContainer/>} exact path=\"/users\"/>\r\n                  <Route component={News} path=\"/news\"/>\r\n                  <Route component={Music} path=\"/music\"/>\r\n                  <Route component={Settings} path=\"/settings\"/>\r\n                  <Route component={FindFriends} path=\"/findFriends\"/>\r\n                  <Route component={LoginPage} path=\"/login\"/>\r\n                  <Route path={'*'} render={() => <div>ERROR 404</div>}/>\r\n                </Switch>\r\n              </div>\r\n            </div>\r\n          </HashRouter>\r\n        // </Suspense>\r\n    );\r\n  }\r\n}\r\n\r\nconst AppContainer = compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n      initializeApp,\r\n    }),\r\n)(App);\r\n\r\nexport const MainApp = () => {\r\n  return <React.StrictMode>\r\n    <Provider store={store}>\r\n      <AppContainer/>\r\n    </Provider>\r\n  </React.StrictMode>\r\n}\r\n","import './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {MainApp} from \"./App\";\r\n\r\nReactDOM.render(<MainApp/>, document.getElementById('root'));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppHeader\":\"Header_AppHeader__3RgHs\",\"AppLogo\":\"Header_AppLogo__3z8wq\",\"loginBlock\":\"Header_loginBlock__1mU5U\",\"userName\":\"Header_userName__lGbDY\",\"loginTitle\":\"Header_loginTitle__vm67N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1eM7x\",\"error\":\"FormsControls_error__3vels\",\"formSummaryError\":\"FormsControls_formSummaryError__1z8YO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__ZKL0k\",\"messages\":\"Dialogs_messages__1njig\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__8dAXu\",\"page\":\"Paginator_page__2nPr0\",\"selectedPage\":\"Paginator_selectedPage__31wl_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"User_photo__2_uGu\",\"userProfile\":\"User_userProfile__Qp54x\",\"page\":\"User_page__3z_-w\",\"selectedPage\":\"User_selectedPage__3DL_6\",\"unFollow\":\"User_unFollow__2UVEC\",\"follow\":\"User_follow__1s7TM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppWrapper\":\"App_AppWrapper__V62o8\",\"AppContent\":\"App_AppContent__qt_pG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__2jUb1\",\"posts\":\"MyPosts_posts__2aDkj\",\"myPostTextarea\":\"MyPosts_myPostTextarea__2j9QW\",\"error\":\"MyPosts_error__3N99d\",\"errorText\":\"MyPosts_errorText__KcuBn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsItems\":\"DialogsItem_dialogsItems__bBzrb\",\"dialog\":\"DialogsItem_dialog__1BvBe\",\"active\":\"DialogsItem_active__38HrX\"};"],"sourceRoot":""}